### YamlMime:ManagedReference
items:
- uid: Unsplasharp.UnsplasharpClient
  commentId: T:Unsplasharp.UnsplasharpClient
  id: UnsplasharpClient
  parent: Unsplasharp
  children:
  - Unsplasharp.UnsplasharpClient.#ctor(System.String,System.String,Microsoft.Extensions.Logging.ILogger{Unsplasharp.UnsplasharpClient},System.Net.Http.IHttpClientFactory)
  - Unsplasharp.UnsplasharpClient.ApplicationId
  - Unsplasharp.UnsplasharpClient.FetchCollectionsList(System.String)
  - Unsplasharp.UnsplasharpClient.FetchCollectionsList(System.String,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.FetchPhoto(System.String)
  - Unsplasharp.UnsplasharpClient.FetchPhoto(System.String,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.FetchPhotosList(System.String)
  - Unsplasharp.UnsplasharpClient.FetchPhotosList(System.String,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList(System.String)
  - Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList(System.String,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.FetchSearcUsersList(System.String)
  - Unsplasharp.UnsplasharpClient.FetchSearchPhotosList(System.String)
  - Unsplasharp.UnsplasharpClient.FetchSearchPhotosList(System.String,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.GetCollection(System.String)
  - Unsplasharp.UnsplasharpClient.GetCollection(System.String,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.GetCollectionPhotos(System.String,System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.GetCollectionPhotos(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.GetMonthlyStats
  - Unsplasharp.UnsplasharpClient.GetPhoto(System.String,System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.GetPhoto(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.GetPhoto(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.GetPhoto(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.GetPhotoAsync(System.String,System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.GetPhotoAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.GetPhotoDownloadLink(System.String)
  - Unsplasharp.UnsplasharpClient.GetPhotoStats(System.String,Unsplasharp.UnsplasharpClient.Resolution,System.Int32)
  - Unsplasharp.UnsplasharpClient.GetRandomPhoto
  - Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.Boolean,System.String,System.String,System.Int32,System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.Int32,System.String,System.String,System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.String)
  - Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.String,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.String[])
  - Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.String[],System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.GetRandomPhoto(Unsplasharp.UnsplasharpClient.Orientation,System.Boolean,System.String,System.String,System.Int32,System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.GetRandomPhoto(Unsplasharp.UnsplasharpClient.Orientation,System.String,System.String,System.Int32,System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.GetRandomPhotoAsync
  - Unsplasharp.UnsplasharpClient.GetRandomPhotoAsync(System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.GetTotalStats
  - Unsplasharp.UnsplasharpClient.GetTotalStats(System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.GetUser(System.String,System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.GetUser(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.GetUserPorfolioLink(System.String)
  - Unsplasharp.UnsplasharpClient.GetUserStats(System.String,Unsplasharp.UnsplasharpClient.Resolution,System.Int32)
  - Unsplasharp.UnsplasharpClient.LastCollectionsSearchQuery
  - Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalPages
  - Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalResults
  - Unsplasharp.UnsplasharpClient.LastPhotosSearchQuery
  - Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalPages
  - Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalResults
  - Unsplasharp.UnsplasharpClient.LastUsersSearchQuery
  - Unsplasharp.UnsplasharpClient.LastUsersSearchTotalPages
  - Unsplasharp.UnsplasharpClient.LastUsersSearchTotalResults
  - Unsplasharp.UnsplasharpClient.ListCollections(System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.ListCollections(System.Int32,System.Int32,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.ListFeaturedCollections(System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.ListFeaturedCollections(System.Int32,System.Int32,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.ListPhotos(System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy)
  - Unsplasharp.UnsplasharpClient.ListPhotos(System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.ListRelatedCollections(System.String)
  - Unsplasharp.UnsplasharpClient.ListRelatedCollections(System.String,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.ListUserCollections(System.String,System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.ListUserLikedPhotos(System.String,System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy)
  - Unsplasharp.UnsplasharpClient.ListUserPhotos(System.String,System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy,System.Boolean,System.Int32)
  - Unsplasharp.UnsplasharpClient.MaxRateLimit
  - Unsplasharp.UnsplasharpClient.RateLimitRemaining
  - Unsplasharp.UnsplasharpClient.SearchCollections(System.String,System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.SearchCollections(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.String,System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.String[],System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - Unsplasharp.UnsplasharpClient.SearchUsers(System.String,System.Int32,System.Int32)
  - Unsplasharp.UnsplasharpClient.Secret
  langs:
  - csharp
  - vb
  name: UnsplasharpClient
  nameWithType: UnsplasharpClient
  fullName: Unsplasharp.UnsplasharpClient
  type: Class
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: UnsplasharpClient
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 20
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Represents a Unsplasharp class which can be used to communicate with Unplash APIs.
  example: []
  syntax:
    content: public class UnsplasharpClient
    content.vb: Public Class UnsplasharpClient
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Unsplasharp.UnsplasharpClient.Secret
  commentId: P:Unsplasharp.UnsplasharpClient.Secret
  id: Secret
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: Secret
  nameWithType: UnsplasharpClient.Secret
  fullName: Unsplasharp.UnsplasharpClient.Secret
  type: Property
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: Secret
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 25
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: API Key
  example: []
  syntax:
    content: public string? Secret { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Secret As String
  overload: Unsplasharp.UnsplasharpClient.Secret*
- uid: Unsplasharp.UnsplasharpClient.ApplicationId
  commentId: P:Unsplasharp.UnsplasharpClient.ApplicationId
  id: ApplicationId
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: ApplicationId
  nameWithType: UnsplasharpClient.ApplicationId
  fullName: Unsplasharp.UnsplasharpClient.ApplicationId
  type: Property
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: ApplicationId
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 32
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: >-
    Identify the application making API calls

    Must be created through Unplash developer page

    https://unsplash.com/developers
  example: []
  syntax:
    content: public string ApplicationId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ApplicationId As String
  overload: Unsplasharp.UnsplasharpClient.ApplicationId*
- uid: Unsplasharp.UnsplasharpClient.MaxRateLimit
  commentId: P:Unsplasharp.UnsplasharpClient.MaxRateLimit
  id: MaxRateLimit
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: MaxRateLimit
  nameWithType: UnsplasharpClient.MaxRateLimit
  fullName: Unsplasharp.UnsplasharpClient.MaxRateLimit
  type: Property
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: MaxRateLimit
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 81
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Maximum number of request allowed per hour.
  example: []
  syntax:
    content: public int MaxRateLimit { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property MaxRateLimit As Integer
  overload: Unsplasharp.UnsplasharpClient.MaxRateLimit*
- uid: Unsplasharp.UnsplasharpClient.RateLimitRemaining
  commentId: P:Unsplasharp.UnsplasharpClient.RateLimitRemaining
  id: RateLimitRemaining
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: RateLimitRemaining
  nameWithType: UnsplasharpClient.RateLimitRemaining
  fullName: Unsplasharp.UnsplasharpClient.RateLimitRemaining
  type: Property
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: RateLimitRemaining
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 86
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Remaining allowed requests in the current hour.
  example: []
  syntax:
    content: public int RateLimitRemaining { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property RateLimitRemaining As Integer
  overload: Unsplasharp.UnsplasharpClient.RateLimitRemaining*
- uid: Unsplasharp.UnsplasharpClient.LastPhotosSearchQuery
  commentId: P:Unsplasharp.UnsplasharpClient.LastPhotosSearchQuery
  id: LastPhotosSearchQuery
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: LastPhotosSearchQuery
  nameWithType: UnsplasharpClient.LastPhotosSearchQuery
  fullName: Unsplasharp.UnsplasharpClient.LastPhotosSearchQuery
  type: Property
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: LastPhotosSearchQuery
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 95
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Last photo search query
  example: []
  syntax:
    content: public string? LastPhotosSearchQuery { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LastPhotosSearchQuery As String
  overload: Unsplasharp.UnsplasharpClient.LastPhotosSearchQuery*
- uid: Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalPages
  commentId: P:Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalPages
  id: LastPhotosSearchTotalPages
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: LastPhotosSearchTotalPages
  nameWithType: UnsplasharpClient.LastPhotosSearchTotalPages
  fullName: Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalPages
  type: Property
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: LastPhotosSearchTotalPages
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 100
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Total pages of last search photos query
  example: []
  syntax:
    content: public int LastPhotosSearchTotalPages { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property LastPhotosSearchTotalPages As Integer
  overload: Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalPages*
- uid: Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalResults
  commentId: P:Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalResults
  id: LastPhotosSearchTotalResults
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: LastPhotosSearchTotalResults
  nameWithType: UnsplasharpClient.LastPhotosSearchTotalResults
  fullName: Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalResults
  type: Property
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: LastPhotosSearchTotalResults
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 105
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Total results of last search photos query
  example: []
  syntax:
    content: public int LastPhotosSearchTotalResults { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property LastPhotosSearchTotalResults As Integer
  overload: Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalResults*
- uid: Unsplasharp.UnsplasharpClient.LastCollectionsSearchQuery
  commentId: P:Unsplasharp.UnsplasharpClient.LastCollectionsSearchQuery
  id: LastCollectionsSearchQuery
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: LastCollectionsSearchQuery
  nameWithType: UnsplasharpClient.LastCollectionsSearchQuery
  fullName: Unsplasharp.UnsplasharpClient.LastCollectionsSearchQuery
  type: Property
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: LastCollectionsSearchQuery
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 114
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Last collection search query
  example: []
  syntax:
    content: public string? LastCollectionsSearchQuery { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LastCollectionsSearchQuery As String
  overload: Unsplasharp.UnsplasharpClient.LastCollectionsSearchQuery*
- uid: Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalPages
  commentId: P:Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalPages
  id: LastCollectionsSearchTotalPages
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: LastCollectionsSearchTotalPages
  nameWithType: UnsplasharpClient.LastCollectionsSearchTotalPages
  fullName: Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalPages
  type: Property
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: LastCollectionsSearchTotalPages
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 119
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Total pages of last search collections query
  example: []
  syntax:
    content: public int LastCollectionsSearchTotalPages { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property LastCollectionsSearchTotalPages As Integer
  overload: Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalPages*
- uid: Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalResults
  commentId: P:Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalResults
  id: LastCollectionsSearchTotalResults
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: LastCollectionsSearchTotalResults
  nameWithType: UnsplasharpClient.LastCollectionsSearchTotalResults
  fullName: Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalResults
  type: Property
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: LastCollectionsSearchTotalResults
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 124
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Total results of last search collections query
  example: []
  syntax:
    content: public int LastCollectionsSearchTotalResults { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property LastCollectionsSearchTotalResults As Integer
  overload: Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalResults*
- uid: Unsplasharp.UnsplasharpClient.LastUsersSearchQuery
  commentId: P:Unsplasharp.UnsplasharpClient.LastUsersSearchQuery
  id: LastUsersSearchQuery
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: LastUsersSearchQuery
  nameWithType: UnsplasharpClient.LastUsersSearchQuery
  fullName: Unsplasharp.UnsplasharpClient.LastUsersSearchQuery
  type: Property
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: LastUsersSearchQuery
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 133
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Last collection search query
  example: []
  syntax:
    content: public string? LastUsersSearchQuery { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LastUsersSearchQuery As String
  overload: Unsplasharp.UnsplasharpClient.LastUsersSearchQuery*
- uid: Unsplasharp.UnsplasharpClient.LastUsersSearchTotalPages
  commentId: P:Unsplasharp.UnsplasharpClient.LastUsersSearchTotalPages
  id: LastUsersSearchTotalPages
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: LastUsersSearchTotalPages
  nameWithType: UnsplasharpClient.LastUsersSearchTotalPages
  fullName: Unsplasharp.UnsplasharpClient.LastUsersSearchTotalPages
  type: Property
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: LastUsersSearchTotalPages
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 138
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Total pages of last search collections query
  example: []
  syntax:
    content: public int LastUsersSearchTotalPages { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property LastUsersSearchTotalPages As Integer
  overload: Unsplasharp.UnsplasharpClient.LastUsersSearchTotalPages*
- uid: Unsplasharp.UnsplasharpClient.LastUsersSearchTotalResults
  commentId: P:Unsplasharp.UnsplasharpClient.LastUsersSearchTotalResults
  id: LastUsersSearchTotalResults
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: LastUsersSearchTotalResults
  nameWithType: UnsplasharpClient.LastUsersSearchTotalResults
  fullName: Unsplasharp.UnsplasharpClient.LastUsersSearchTotalResults
  type: Property
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: LastUsersSearchTotalResults
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 143
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Total results of last search collections query
  example: []
  syntax:
    content: public int LastUsersSearchTotalResults { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property LastUsersSearchTotalResults As Integer
  overload: Unsplasharp.UnsplasharpClient.LastUsersSearchTotalResults*
- uid: Unsplasharp.UnsplasharpClient.#ctor(System.String,System.String,Microsoft.Extensions.Logging.ILogger{Unsplasharp.UnsplasharpClient},System.Net.Http.IHttpClientFactory)
  commentId: M:Unsplasharp.UnsplasharpClient.#ctor(System.String,System.String,Microsoft.Extensions.Logging.ILogger{Unsplasharp.UnsplasharpClient},System.Net.Http.IHttpClientFactory)
  id: '#ctor(System.String,System.String,Microsoft.Extensions.Logging.ILogger{Unsplasharp.UnsplasharpClient},System.Net.Http.IHttpClientFactory)'
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: UnsplasharpClient(string, string?, ILogger<UnsplasharpClient>?, IHttpClientFactory?)
  nameWithType: UnsplasharpClient.UnsplasharpClient(string, string?, ILogger<UnsplasharpClient>?, IHttpClientFactory?)
  fullName: Unsplasharp.UnsplasharpClient.UnsplasharpClient(string, string?, Microsoft.Extensions.Logging.ILogger<Unsplasharp.UnsplasharpClient>?, System.Net.Http.IHttpClientFactory?)
  type: Constructor
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: .ctor
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 204
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Initialize a new instance of Unplasharp class.
  example: []
  syntax:
    content: public UnsplasharpClient(string applicationId, string? secret = null, ILogger<UnsplasharpClient>? logger = null, IHttpClientFactory? httpClientFactory = null)
    parameters:
    - id: applicationId
      type: System.String
      description: A string to identify the current application performing a request.
    - id: secret
      type: System.String
      description: A string representing an API secret key to make HTTP authentified calls to Unplash services.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{Unsplasharp.UnsplasharpClient}
      description: Optional logger for structured logging.
    - id: httpClientFactory
      type: System.Net.Http.IHttpClientFactory
      description: Optional IHttpClientFactory for modern HTTP client management. If not provided, falls back to legacy HttpClient management.
    content.vb: Public Sub New(applicationId As String, secret As String = Nothing, logger As ILogger(Of UnsplasharpClient) = Nothing, httpClientFactory As IHttpClientFactory = Nothing)
  overload: Unsplasharp.UnsplasharpClient.#ctor*
  nameWithType.vb: UnsplasharpClient.New(String, String, ILogger(Of UnsplasharpClient), IHttpClientFactory)
  fullName.vb: Unsplasharp.UnsplasharpClient.New(String, String, Microsoft.Extensions.Logging.ILogger(Of Unsplasharp.UnsplasharpClient), System.Net.Http.IHttpClientFactory)
  name.vb: New(String, String, ILogger(Of UnsplasharpClient), IHttpClientFactory)
- uid: Unsplasharp.UnsplasharpClient.GetPhoto(System.String,System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.GetPhoto(System.String,System.Int32,System.Int32)
  id: GetPhoto(System.String,System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetPhoto(string, int, int)
  nameWithType: UnsplasharpClient.GetPhoto(string, int, int)
  fullName: Unsplasharp.UnsplasharpClient.GetPhoto(string, int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 228
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Returns the photo corresponding to the given id.
  example: []
  syntax:
    content: public Task<Photo?> GetPhoto(string id, int width = 0, int height = 0)
    parameters:
    - id: id
      type: System.String
      description: Photo's unique id to find.
    - id: width
      type: System.Int32
      description: Desired width.
    - id: height
      type: System.Int32
      description: Desired height.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A new Photo class instance.
    content.vb: Public Function GetPhoto(id As String, width As Integer = 0, height As Integer = 0) As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.GetPhoto*
  nameWithType.vb: UnsplasharpClient.GetPhoto(String, Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetPhoto(String, Integer, Integer)
  name.vb: GetPhoto(String, Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.GetPhoto(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.GetPhoto(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetPhoto(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetPhoto(string, int, int, CancellationToken)
  nameWithType: UnsplasharpClient.GetPhoto(string, int, int, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.GetPhoto(string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 240
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Returns the photo corresponding to the given id.
  example: []
  syntax:
    content: public Task<Photo?> GetPhoto(string id, int width, int height, CancellationToken cancellationToken)
    parameters:
    - id: id
      type: System.String
      description: Photo's unique id to find.
    - id: width
      type: System.Int32
      description: Desired width.
    - id: height
      type: System.Int32
      description: Desired height.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A new Photo class instance.
    content.vb: Public Function GetPhoto(id As String, width As Integer, height As Integer, cancellationToken As CancellationToken) As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.GetPhoto*
  nameWithType.vb: UnsplasharpClient.GetPhoto(String, Integer, Integer, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetPhoto(String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: GetPhoto(String, Integer, Integer, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.GetPhoto(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.GetPhoto(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: GetPhoto(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetPhoto(string, int, int, int, int, int, int)
  nameWithType: UnsplasharpClient.GetPhoto(string, int, int, int, int, int, int)
  fullName: Unsplasharp.UnsplasharpClient.GetPhoto(string, int, int, int, int, int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 261
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: >-
    Returns the photo corresponding to the given id,

    in the specified width and height and cropped according to a specified rectangle.
  example: []
  syntax:
    content: public Task<Photo?> GetPhoto(string id, int width, int height, int rectX, int rectY, int rectWidth, int rectHeight)
    parameters:
    - id: id
      type: System.String
      description: Photo's unique id to find.
    - id: width
      type: System.Int32
      description: Desired width.
    - id: height
      type: System.Int32
      description: Desired height.
    - id: rectX
      type: System.Int32
      description: X origin point of the cropped rectangle.
    - id: rectY
      type: System.Int32
      description: Y origin point of the cropped rectangle.
    - id: rectWidth
      type: System.Int32
      description: Width of the cropped rectangle.
    - id: rectHeight
      type: System.Int32
      description: Height of the cropped rectangle.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A new Photo class instance which has a custom URL.
    content.vb: Public Function GetPhoto(id As String, width As Integer, height As Integer, rectX As Integer, rectY As Integer, rectWidth As Integer, rectHeight As Integer) As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.GetPhoto*
  nameWithType.vb: UnsplasharpClient.GetPhoto(String, Integer, Integer, Integer, Integer, Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetPhoto(String, Integer, Integer, Integer, Integer, Integer, Integer)
  name.vb: GetPhoto(String, Integer, Integer, Integer, Integer, Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.GetPhoto(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.GetPhoto(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetPhoto(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetPhoto(string, int, int, int, int, int, int, CancellationToken)
  nameWithType: UnsplasharpClient.GetPhoto(string, int, int, int, int, int, int, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.GetPhoto(string, int, int, int, int, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 278
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: >-
    Returns the photo corresponding to the given id,

    in the specified width and height and cropped according to a specified rectangle.
  example: []
  syntax:
    content: public Task<Photo?> GetPhoto(string id, int width, int height, int rectX, int rectY, int rectWidth, int rectHeight, CancellationToken cancellationToken)
    parameters:
    - id: id
      type: System.String
      description: Photo's unique id to find.
    - id: width
      type: System.Int32
      description: Desired width.
    - id: height
      type: System.Int32
      description: Desired height.
    - id: rectX
      type: System.Int32
      description: X origin point of the cropped rectangle.
    - id: rectY
      type: System.Int32
      description: Y origin point of the cropped rectangle.
    - id: rectWidth
      type: System.Int32
      description: Width of the cropped rectangle.
    - id: rectHeight
      type: System.Int32
      description: Height of the cropped rectangle.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A new Photo class instance which has a custom URL.
    content.vb: Public Function GetPhoto(id As String, width As Integer, height As Integer, rectX As Integer, rectY As Integer, rectWidth As Integer, rectHeight As Integer, cancellationToken As CancellationToken) As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.GetPhoto*
  nameWithType.vb: UnsplasharpClient.GetPhoto(String, Integer, Integer, Integer, Integer, Integer, Integer, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetPhoto(String, Integer, Integer, Integer, Integer, Integer, Integer, System.Threading.CancellationToken)
  name.vb: GetPhoto(String, Integer, Integer, Integer, Integer, Integer, Integer, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.GetRandomPhoto
  commentId: M:Unsplasharp.UnsplasharpClient.GetRandomPhoto
  id: GetRandomPhoto
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetRandomPhoto()
  nameWithType: UnsplasharpClient.GetRandomPhoto()
  fullName: Unsplasharp.UnsplasharpClient.GetRandomPhoto()
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetRandomPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 289
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Retrieve a single random photo.
  example: []
  syntax:
    content: public Task<Photo?> GetRandomPhoto()
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A new Photo class instance.
    content.vb: Public Function GetRandomPhoto() As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.GetRandomPhoto*
- uid: Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.Threading.CancellationToken)
  id: GetRandomPhoto(System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetRandomPhoto(CancellationToken)
  nameWithType: UnsplasharpClient.GetRandomPhoto(CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetRandomPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 298
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Retrieve a single random photo.
  example: []
  syntax:
    content: public Task<Photo?> GetRandomPhoto(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A new Photo class instance.
    content.vb: Public Function GetRandomPhoto(cancellationToken As CancellationToken) As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.GetRandomPhoto*
- uid: Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.String)
  commentId: M:Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.String)
  id: GetRandomPhoto(System.String)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetRandomPhoto(string)
  nameWithType: UnsplasharpClient.GetRandomPhoto(string)
  fullName: Unsplasharp.UnsplasharpClient.GetRandomPhoto(string)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetRandomPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 317
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Retrieve a single random photo from a specific collection.
  example: []
  syntax:
    content: public Task<Photo?> GetRandomPhoto(string collectionId)
    parameters:
    - id: collectionId
      type: System.String
      description: Public collection ID to filter selection.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A new Photo class instance.
    content.vb: Public Function GetRandomPhoto(collectionId As String) As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.GetRandomPhoto*
  nameWithType.vb: UnsplasharpClient.GetRandomPhoto(String)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetRandomPhoto(String)
  name.vb: GetRandomPhoto(String)
- uid: Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.String,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.String,System.Threading.CancellationToken)
  id: GetRandomPhoto(System.String,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetRandomPhoto(string, CancellationToken)
  nameWithType: UnsplasharpClient.GetRandomPhoto(string, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.GetRandomPhoto(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetRandomPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 327
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Retrieve a single random photo from a specific collection.
  example: []
  syntax:
    content: public Task<Photo?> GetRandomPhoto(string collectionId, CancellationToken cancellationToken)
    parameters:
    - id: collectionId
      type: System.String
      description: Public collection ID to filter selection.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A new Photo class instance.
    content.vb: Public Function GetRandomPhoto(collectionId As String, cancellationToken As CancellationToken) As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.GetRandomPhoto*
  nameWithType.vb: UnsplasharpClient.GetRandomPhoto(String, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetRandomPhoto(String, System.Threading.CancellationToken)
  name.vb: GetRandomPhoto(String, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.String[])
  commentId: M:Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.String[])
  id: GetRandomPhoto(System.String[])
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetRandomPhoto(string[])
  nameWithType: UnsplasharpClient.GetRandomPhoto(string[])
  fullName: Unsplasharp.UnsplasharpClient.GetRandomPhoto(string[])
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetRandomPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 337
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Retrieve a single random photo from specific collections.
  example: []
  syntax:
    content: public Task<Photo?> GetRandomPhoto(string[] collectionIds)
    parameters:
    - id: collectionIds
      type: System.String[]
      description: Public collection ID('s) to filter selection.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A new Photo class instance.
    content.vb: Public Function GetRandomPhoto(collectionIds As String()) As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.GetRandomPhoto*
  nameWithType.vb: UnsplasharpClient.GetRandomPhoto(String())
  fullName.vb: Unsplasharp.UnsplasharpClient.GetRandomPhoto(String())
  name.vb: GetRandomPhoto(String())
- uid: Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.String[],System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.String[],System.Threading.CancellationToken)
  id: GetRandomPhoto(System.String[],System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetRandomPhoto(string[], CancellationToken)
  nameWithType: UnsplasharpClient.GetRandomPhoto(string[], CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.GetRandomPhoto(string[], System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetRandomPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 347
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Retrieve a single random photo from specific collections.
  example: []
  syntax:
    content: public Task<Photo?> GetRandomPhoto(string[] collectionIds, CancellationToken cancellationToken)
    parameters:
    - id: collectionIds
      type: System.String[]
      description: Public collection ID(‘s) to filter selection.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A new Photo class instance.
    content.vb: Public Function GetRandomPhoto(collectionIds As String(), cancellationToken As CancellationToken) As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.GetRandomPhoto*
  nameWithType.vb: UnsplasharpClient.GetRandomPhoto(String(), CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetRandomPhoto(String(), System.Threading.CancellationToken)
  name.vb: GetRandomPhoto(String(), CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.Int32,System.String,System.String,System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.Int32,System.String,System.String,System.Int32,System.Int32)
  id: GetRandomPhoto(System.Int32,System.String,System.String,System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetRandomPhoto(int, string, string, int, int)
  nameWithType: UnsplasharpClient.GetRandomPhoto(int, string, string, int, int)
  fullName: Unsplasharp.UnsplasharpClient.GetRandomPhoto(int, string, string, int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetRandomPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 363
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Retrieve a single random photo, given optional filters.
  example: []
  syntax:
    content: public Task<List<Photo>> GetRandomPhoto(int count, string username = "", string query = "", int width = 0, int height = 0)
    parameters:
    - id: count
      type: System.Int32
      description: 'The number of photos to return. (Default: 1; max: 30)'
    - id: username
      type: System.String
      description: Limit selection to a single user.
    - id: query
      type: System.String
      description: Limit selection to photos matching a search term.
    - id: width
      type: System.Int32
      description: Image width in pixels.
    - id: height
      type: System.Int32
      description: Image height in pixels.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of random photos.
    content.vb: Public Function GetRandomPhoto(count As Integer, username As String = "", query As String = "", width As Integer = 0, height As Integer = 0) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.GetRandomPhoto*
  nameWithType.vb: UnsplasharpClient.GetRandomPhoto(Integer, String, String, Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetRandomPhoto(Integer, String, String, Integer, Integer)
  name.vb: GetRandomPhoto(Integer, String, String, Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.GetRandomPhoto(Unsplasharp.UnsplasharpClient.Orientation,System.String,System.String,System.Int32,System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.GetRandomPhoto(Unsplasharp.UnsplasharpClient.Orientation,System.String,System.String,System.Int32,System.Int32,System.Int32)
  id: GetRandomPhoto(Unsplasharp.UnsplasharpClient.Orientation,System.String,System.String,System.Int32,System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetRandomPhoto(Orientation, string, string, int, int, int)
  nameWithType: UnsplasharpClient.GetRandomPhoto(UnsplasharpClient.Orientation, string, string, int, int, int)
  fullName: Unsplasharp.UnsplasharpClient.GetRandomPhoto(Unsplasharp.UnsplasharpClient.Orientation, string, string, int, int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetRandomPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 387
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Retrieve a single random photo, given optional filters.
  example: []
  syntax:
    content: public Task<List<Photo>> GetRandomPhoto(UnsplasharpClient.Orientation orientation, string username = "", string query = "", int width = 0, int height = 0, int count = 1)
    parameters:
    - id: orientation
      type: Unsplasharp.UnsplasharpClient.Orientation
      description: Filter search results by photo orientation.
    - id: username
      type: System.String
      description: Limit selection to a single user.
    - id: query
      type: System.String
      description: Limit selection to photos matching a search term.
    - id: width
      type: System.Int32
      description: Image width in pixels.
    - id: height
      type: System.Int32
      description: Image height in pixels.
    - id: count
      type: System.Int32
      description: 'The number of photos to return. (Default: 1; max: 30)'
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of random photos.
    content.vb: Public Function GetRandomPhoto(orientation As UnsplasharpClient.Orientation, username As String = "", query As String = "", width As Integer = 0, height As Integer = 0, count As Integer = 1) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.GetRandomPhoto*
  nameWithType.vb: UnsplasharpClient.GetRandomPhoto(UnsplasharpClient.Orientation, String, String, Integer, Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetRandomPhoto(Unsplasharp.UnsplasharpClient.Orientation, String, String, Integer, Integer, Integer)
  name.vb: GetRandomPhoto(Orientation, String, String, Integer, Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.Boolean,System.String,System.String,System.Int32,System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.GetRandomPhoto(System.Boolean,System.String,System.String,System.Int32,System.Int32,System.Int32)
  id: GetRandomPhoto(System.Boolean,System.String,System.String,System.Int32,System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetRandomPhoto(bool, string, string, int, int, int)
  nameWithType: UnsplasharpClient.GetRandomPhoto(bool, string, string, int, int, int)
  fullName: Unsplasharp.UnsplasharpClient.GetRandomPhoto(bool, string, string, int, int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetRandomPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 413
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Retrieve a single random photo, given optional filters.
  example: []
  syntax:
    content: public Task<List<Photo>> GetRandomPhoto(bool featured, string username = "", string query = "", int width = 0, int height = 0, int count = 1)
    parameters:
    - id: featured
      type: System.Boolean
      description: Limit selection to featured photos.
    - id: username
      type: System.String
      description: Limit selection to a single user.
    - id: query
      type: System.String
      description: Limit selection to photos matching a search term.
    - id: width
      type: System.Int32
      description: Image width in pixels.
    - id: height
      type: System.Int32
      description: Image height in pixels.
    - id: count
      type: System.Int32
      description: 'The number of photos to return. (Default: 1; max: 30)'
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of random photos.
    content.vb: Public Function GetRandomPhoto(featured As Boolean, username As String = "", query As String = "", width As Integer = 0, height As Integer = 0, count As Integer = 1) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.GetRandomPhoto*
  nameWithType.vb: UnsplasharpClient.GetRandomPhoto(Boolean, String, String, Integer, Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetRandomPhoto(Boolean, String, String, Integer, Integer, Integer)
  name.vb: GetRandomPhoto(Boolean, String, String, Integer, Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.GetRandomPhoto(Unsplasharp.UnsplasharpClient.Orientation,System.Boolean,System.String,System.String,System.Int32,System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.GetRandomPhoto(Unsplasharp.UnsplasharpClient.Orientation,System.Boolean,System.String,System.String,System.Int32,System.Int32,System.Int32)
  id: GetRandomPhoto(Unsplasharp.UnsplasharpClient.Orientation,System.Boolean,System.String,System.String,System.Int32,System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetRandomPhoto(Orientation, bool, string, string, int, int, int)
  nameWithType: UnsplasharpClient.GetRandomPhoto(UnsplasharpClient.Orientation, bool, string, string, int, int, int)
  fullName: Unsplasharp.UnsplasharpClient.GetRandomPhoto(Unsplasharp.UnsplasharpClient.Orientation, bool, string, string, int, int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetRandomPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 438
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Retrieve a single random photo, given optional filters.
  example: []
  syntax:
    content: public Task<List<Photo>> GetRandomPhoto(UnsplasharpClient.Orientation orientation, bool featured, string username = "", string query = "", int width = 0, int height = 0, int count = 1)
    parameters:
    - id: orientation
      type: Unsplasharp.UnsplasharpClient.Orientation
      description: Filter search results by photo orientation.
    - id: featured
      type: System.Boolean
      description: Limit selection to featured photos.
    - id: username
      type: System.String
      description: Limit selection to a single user.
    - id: query
      type: System.String
      description: Limit selection to photos matching a search term.
    - id: width
      type: System.Int32
      description: Image width in pixels.
    - id: height
      type: System.Int32
      description: Image height in pixels.
    - id: count
      type: System.Int32
      description: 'The number of photos to return. (Default: 1; max: 30)'
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of random photos.
    content.vb: Public Function GetRandomPhoto(orientation As UnsplasharpClient.Orientation, featured As Boolean, username As String = "", query As String = "", width As Integer = 0, height As Integer = 0, count As Integer = 1) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.GetRandomPhoto*
  nameWithType.vb: UnsplasharpClient.GetRandomPhoto(UnsplasharpClient.Orientation, Boolean, String, String, Integer, Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetRandomPhoto(Unsplasharp.UnsplasharpClient.Orientation, Boolean, String, String, Integer, Integer, Integer)
  name.vb: GetRandomPhoto(Orientation, Boolean, String, String, Integer, Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.GetPhotoStats(System.String,Unsplasharp.UnsplasharpClient.Resolution,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.GetPhotoStats(System.String,Unsplasharp.UnsplasharpClient.Resolution,System.Int32)
  id: GetPhotoStats(System.String,Unsplasharp.UnsplasharpClient.Resolution,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetPhotoStats(string, Resolution, int)
  nameWithType: UnsplasharpClient.GetPhotoStats(string, UnsplasharpClient.Resolution, int)
  fullName: Unsplasharp.UnsplasharpClient.GetPhotoStats(string, Unsplasharp.UnsplasharpClient.Resolution, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetPhotoStats
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 464
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: >-
    Retrieve total number of downloads,

    views and likes of a single photo, 

    as well as the historical breakdown 

    of these stats in a specific timeframe (default is 30 days).
  example: []
  syntax:
    content: public Task<PhotoStats?> GetPhotoStats(string id, UnsplasharpClient.Resolution resolution = Resolution.Days, int quantity = 30)
    parameters:
    - id: id
      type: System.String
      description: The public id of the photo.
    - id: resolution
      type: Unsplasharp.UnsplasharpClient.Resolution
      description: The frequency of the stats.
    - id: quantity
      type: System.Int32
      description: The amount of for each stat.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.PhotoStats}
      description: ''
    content.vb: Public Function GetPhotoStats(id As String, resolution As UnsplasharpClient.Resolution = Resolution.Days, quantity As Integer = 30) As Task(Of PhotoStats)
  overload: Unsplasharp.UnsplasharpClient.GetPhotoStats*
  nameWithType.vb: UnsplasharpClient.GetPhotoStats(String, UnsplasharpClient.Resolution, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetPhotoStats(String, Unsplasharp.UnsplasharpClient.Resolution, Integer)
  name.vb: GetPhotoStats(String, Resolution, Integer)
- uid: Unsplasharp.UnsplasharpClient.GetPhotoDownloadLink(System.String)
  commentId: M:Unsplasharp.UnsplasharpClient.GetPhotoDownloadLink(System.String)
  id: GetPhotoDownloadLink(System.String)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetPhotoDownloadLink(string)
  nameWithType: UnsplasharpClient.GetPhotoDownloadLink(string)
  fullName: Unsplasharp.UnsplasharpClient.GetPhotoDownloadLink(string)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetPhotoDownloadLink
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 495
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: >-
    Retrieve a single photo’s download link.

    Preferably hit this endpoint if a photo is downloaded in your application for use

    (example: to be displayed on a blog article, to be shared on social media, to be remixed, etc.).
  example: []
  syntax:
    content: public Task<string?> GetPhotoDownloadLink(string id)
    parameters:
    - id: id
      type: System.String
      description: The photo’s ID.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The photo's download link
    content.vb: Public Function GetPhotoDownloadLink(id As String) As Task(Of String)
  overload: Unsplasharp.UnsplasharpClient.GetPhotoDownloadLink*
  nameWithType.vb: UnsplasharpClient.GetPhotoDownloadLink(String)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetPhotoDownloadLink(String)
  name.vb: GetPhotoDownloadLink(String)
- uid: Unsplasharp.UnsplasharpClient.ListPhotos(System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy)
  commentId: M:Unsplasharp.UnsplasharpClient.ListPhotos(System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy)
  id: ListPhotos(System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: ListPhotos(int, int, OrderBy)
  nameWithType: UnsplasharpClient.ListPhotos(int, int, UnsplasharpClient.OrderBy)
  fullName: Unsplasharp.UnsplasharpClient.ListPhotos(int, int, Unsplasharp.UnsplasharpClient.OrderBy)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: ListPhotos
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 512
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Returns a list of all  photos.
  example: []
  syntax:
    content: public Task<List<Photo>> ListPhotos(int page = 1, int perPage = 10, UnsplasharpClient.OrderBy orderBy = OrderBy.Latest)
    parameters:
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: Number of items per page.
    - id: orderBy
      type: Unsplasharp.UnsplasharpClient.OrderBy
      description: How to sort the photos.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: List of all  photos.
    content.vb: Public Function ListPhotos(page As Integer = 1, perPage As Integer = 10, orderBy As UnsplasharpClient.OrderBy = OrderBy.Latest) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.ListPhotos*
  nameWithType.vb: UnsplasharpClient.ListPhotos(Integer, Integer, UnsplasharpClient.OrderBy)
  fullName.vb: Unsplasharp.UnsplasharpClient.ListPhotos(Integer, Integer, Unsplasharp.UnsplasharpClient.OrderBy)
  name.vb: ListPhotos(Integer, Integer, OrderBy)
- uid: Unsplasharp.UnsplasharpClient.ListPhotos(System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.ListPhotos(System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy,System.Threading.CancellationToken)
  id: ListPhotos(System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: ListPhotos(int, int, OrderBy, CancellationToken)
  nameWithType: UnsplasharpClient.ListPhotos(int, int, UnsplasharpClient.OrderBy, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.ListPhotos(int, int, Unsplasharp.UnsplasharpClient.OrderBy, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: ListPhotos
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 524
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Returns a list of all  photos.
  example: []
  syntax:
    content: public Task<List<Photo>> ListPhotos(int page, int perPage, UnsplasharpClient.OrderBy orderBy, CancellationToken cancellationToken)
    parameters:
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: Number of items per page.
    - id: orderBy
      type: Unsplasharp.UnsplasharpClient.OrderBy
      description: How to sort the photos.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: List of all  photos.
    content.vb: Public Function ListPhotos(page As Integer, perPage As Integer, orderBy As UnsplasharpClient.OrderBy, cancellationToken As CancellationToken) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.ListPhotos*
  nameWithType.vb: UnsplasharpClient.ListPhotos(Integer, Integer, UnsplasharpClient.OrderBy, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.ListPhotos(Integer, Integer, Unsplasharp.UnsplasharpClient.OrderBy, System.Threading.CancellationToken)
  name.vb: ListPhotos(Integer, Integer, OrderBy, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.FetchPhotosList(System.String)
  commentId: M:Unsplasharp.UnsplasharpClient.FetchPhotosList(System.String)
  id: FetchPhotosList(System.String)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: FetchPhotosList(string)
  nameWithType: UnsplasharpClient.FetchPhotosList(string)
  fullName: Unsplasharp.UnsplasharpClient.FetchPhotosList(string)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: FetchPhotosList
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 537
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Return a list of photos from the specified URL.
  example: []
  syntax:
    content: public Task<List<Photo>> FetchPhotosList(string url)
    parameters:
    - id: url
      type: System.String
      description: API endpoint to fetch the photos' list.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of photos.
    content.vb: Public Function FetchPhotosList(url As String) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.FetchPhotosList*
  nameWithType.vb: UnsplasharpClient.FetchPhotosList(String)
  fullName.vb: Unsplasharp.UnsplasharpClient.FetchPhotosList(String)
  name.vb: FetchPhotosList(String)
- uid: Unsplasharp.UnsplasharpClient.FetchPhotosList(System.String,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.FetchPhotosList(System.String,System.Threading.CancellationToken)
  id: FetchPhotosList(System.String,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: FetchPhotosList(string, CancellationToken)
  nameWithType: UnsplasharpClient.FetchPhotosList(string, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.FetchPhotosList(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: FetchPhotosList
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 547
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Return a list of photos from the specified URL.
  example: []
  syntax:
    content: public Task<List<Photo>> FetchPhotosList(string url, CancellationToken cancellationToken)
    parameters:
    - id: url
      type: System.String
      description: API endpoint to fetch the photos' list.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of photos.
    content.vb: Public Function FetchPhotosList(url As String, cancellationToken As CancellationToken) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.FetchPhotosList*
  nameWithType.vb: UnsplasharpClient.FetchPhotosList(String, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.FetchPhotosList(String, System.Threading.CancellationToken)
  name.vb: FetchPhotosList(String, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.FetchPhoto(System.String)
  commentId: M:Unsplasharp.UnsplasharpClient.FetchPhoto(System.String)
  id: FetchPhoto(System.String)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: FetchPhoto(string)
  nameWithType: UnsplasharpClient.FetchPhoto(string)
  fullName: Unsplasharp.UnsplasharpClient.FetchPhoto(string)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: FetchPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 577
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Fetch a photo from an Unplash specified URL
  example: []
  syntax:
    content: public Task<Photo?> FetchPhoto(string url)
    parameters:
    - id: url
      type: System.String
      description: URL to fetch photo from.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A single photo instance.
    content.vb: Public Function FetchPhoto(url As String) As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.FetchPhoto*
  nameWithType.vb: UnsplasharpClient.FetchPhoto(String)
  fullName.vb: Unsplasharp.UnsplasharpClient.FetchPhoto(String)
  name.vb: FetchPhoto(String)
- uid: Unsplasharp.UnsplasharpClient.FetchPhoto(System.String,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.FetchPhoto(System.String,System.Threading.CancellationToken)
  id: FetchPhoto(System.String,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: FetchPhoto(string, CancellationToken)
  nameWithType: UnsplasharpClient.FetchPhoto(string, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.FetchPhoto(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: FetchPhoto
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 587
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Fetch a photo from an Unplash specified URL
  example: []
  syntax:
    content: public Task<Photo?> FetchPhoto(string url, CancellationToken cancellationToken)
    parameters:
    - id: url
      type: System.String
      description: URL to fetch photo from.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A single photo instance.
    content.vb: Public Function FetchPhoto(url As String, cancellationToken As CancellationToken) As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.FetchPhoto*
  nameWithType.vb: UnsplasharpClient.FetchPhoto(String, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.FetchPhoto(String, System.Threading.CancellationToken)
  name.vb: FetchPhoto(String, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.GetRandomPhotoAsync
  commentId: M:Unsplasharp.UnsplasharpClient.GetRandomPhotoAsync
  id: GetRandomPhotoAsync
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetRandomPhotoAsync()
  nameWithType: UnsplasharpClient.GetRandomPhotoAsync()
  fullName: Unsplasharp.UnsplasharpClient.GetRandomPhotoAsync()
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetRandomPhotoAsync
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 607
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: >-
    Retrieve a single random photo with comprehensive error handling.

    This method throws specific exceptions for different error scenarios.
  example: []
  syntax:
    content: public Task<Photo> GetRandomPhotoAsync()
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A new Photo class instance.
    content.vb: Public Function GetRandomPhotoAsync() As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.GetRandomPhotoAsync*
  exceptions:
  - type: Unsplasharp.Exceptions.UnsplasharpException
    commentId: T:Unsplasharp.Exceptions.UnsplasharpException
    description: Thrown when the request fails
- uid: Unsplasharp.UnsplasharpClient.GetRandomPhotoAsync(System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.GetRandomPhotoAsync(System.Threading.CancellationToken)
  id: GetRandomPhotoAsync(System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetRandomPhotoAsync(CancellationToken)
  nameWithType: UnsplasharpClient.GetRandomPhotoAsync(CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.GetRandomPhotoAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetRandomPhotoAsync
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 618
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: >-
    Retrieve a single random photo with comprehensive error handling.

    This method throws specific exceptions for different error scenarios.
  example: []
  syntax:
    content: public Task<Photo> GetRandomPhotoAsync(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A new Photo class instance.
    content.vb: Public Function GetRandomPhotoAsync(cancellationToken As CancellationToken) As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.GetRandomPhotoAsync*
  exceptions:
  - type: Unsplasharp.Exceptions.UnsplasharpException
    commentId: T:Unsplasharp.Exceptions.UnsplasharpException
    description: Thrown when the request fails
- uid: Unsplasharp.UnsplasharpClient.GetPhotoAsync(System.String,System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.GetPhotoAsync(System.String,System.Int32,System.Int32)
  id: GetPhotoAsync(System.String,System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetPhotoAsync(string, int, int)
  nameWithType: UnsplasharpClient.GetPhotoAsync(string, int, int)
  fullName: Unsplasharp.UnsplasharpClient.GetPhotoAsync(string, int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetPhotoAsync
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 637
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: >-
    Returns the photo corresponding to the given id with comprehensive error handling.

    This method throws specific exceptions for different error scenarios.
  example: []
  syntax:
    content: public Task<Photo> GetPhotoAsync(string id, int width = 0, int height = 0)
    parameters:
    - id: id
      type: System.String
      description: Photo's unique id to find.
    - id: width
      type: System.Int32
      description: Desired width.
    - id: height
      type: System.Int32
      description: Desired height.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A new Photo class instance.
    content.vb: Public Function GetPhotoAsync(id As String, width As Integer = 0, height As Integer = 0) As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.GetPhotoAsync*
  exceptions:
  - type: Unsplasharp.Exceptions.UnsplasharpException
    commentId: T:Unsplasharp.Exceptions.UnsplasharpException
    description: Thrown when the request fails
  - type: Unsplasharp.Exceptions.UnsplasharpNotFoundException
    commentId: T:Unsplasharp.Exceptions.UnsplasharpNotFoundException
    description: Thrown when the photo is not found
  nameWithType.vb: UnsplasharpClient.GetPhotoAsync(String, Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetPhotoAsync(String, Integer, Integer)
  name.vb: GetPhotoAsync(String, Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.GetPhotoAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.GetPhotoAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetPhotoAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetPhotoAsync(string, int, int, CancellationToken)
  nameWithType: UnsplasharpClient.GetPhotoAsync(string, int, int, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.GetPhotoAsync(string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetPhotoAsync
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 652
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: >-
    Returns the photo corresponding to the given id with comprehensive error handling.

    This method throws specific exceptions for different error scenarios.
  example: []
  syntax:
    content: public Task<Photo> GetPhotoAsync(string id, int width, int height, CancellationToken cancellationToken)
    parameters:
    - id: id
      type: System.String
      description: Photo's unique id to find.
    - id: width
      type: System.Int32
      description: Desired width.
    - id: height
      type: System.Int32
      description: Desired height.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
      description: A new Photo class instance.
    content.vb: Public Function GetPhotoAsync(id As String, width As Integer, height As Integer, cancellationToken As CancellationToken) As Task(Of Photo)
  overload: Unsplasharp.UnsplasharpClient.GetPhotoAsync*
  exceptions:
  - type: Unsplasharp.Exceptions.UnsplasharpException
    commentId: T:Unsplasharp.Exceptions.UnsplasharpException
    description: Thrown when the request fails
  - type: Unsplasharp.Exceptions.UnsplasharpNotFoundException
    commentId: T:Unsplasharp.Exceptions.UnsplasharpNotFoundException
    description: Thrown when the photo is not found
  nameWithType.vb: UnsplasharpClient.GetPhotoAsync(String, Integer, Integer, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetPhotoAsync(String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: GetPhotoAsync(String, Integer, Integer, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.FetchCollectionsList(System.String)
  commentId: M:Unsplasharp.UnsplasharpClient.FetchCollectionsList(System.String)
  id: FetchCollectionsList(System.String)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: FetchCollectionsList(string)
  nameWithType: UnsplasharpClient.FetchCollectionsList(string)
  fullName: Unsplasharp.UnsplasharpClient.FetchCollectionsList(string)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: FetchCollectionsList
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 711
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Returns a list of collections (of photos) from a specified URL
  example: []
  syntax:
    content: public Task<List<Collection>> FetchCollectionsList(string url)
    parameters:
    - id: url
      type: System.String
      description: API endpoint where to fetch the photos' list.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
      description: Collections list
    content.vb: Public Function FetchCollectionsList(url As String) As Task(Of List(Of Collection))
  overload: Unsplasharp.UnsplasharpClient.FetchCollectionsList*
  nameWithType.vb: UnsplasharpClient.FetchCollectionsList(String)
  fullName.vb: Unsplasharp.UnsplasharpClient.FetchCollectionsList(String)
  name.vb: FetchCollectionsList(String)
- uid: Unsplasharp.UnsplasharpClient.FetchCollectionsList(System.String,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.FetchCollectionsList(System.String,System.Threading.CancellationToken)
  id: FetchCollectionsList(System.String,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: FetchCollectionsList(string, CancellationToken)
  nameWithType: UnsplasharpClient.FetchCollectionsList(string, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.FetchCollectionsList(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: FetchCollectionsList
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 721
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Returns a list of collections (of photos) from a specified URL
  example: []
  syntax:
    content: public Task<List<Collection>> FetchCollectionsList(string url, CancellationToken cancellationToken)
    parameters:
    - id: url
      type: System.String
      description: API endpoint where to fetch the photos' list.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
      description: Collections list
    content.vb: Public Function FetchCollectionsList(url As String, cancellationToken As CancellationToken) As Task(Of List(Of Collection))
  overload: Unsplasharp.UnsplasharpClient.FetchCollectionsList*
  nameWithType.vb: UnsplasharpClient.FetchCollectionsList(String, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.FetchCollectionsList(String, System.Threading.CancellationToken)
  name.vb: FetchCollectionsList(String, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.GetCollection(System.String)
  commentId: M:Unsplasharp.UnsplasharpClient.GetCollection(System.String)
  id: GetCollection(System.String)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetCollection(string)
  nameWithType: UnsplasharpClient.GetCollection(string)
  fullName: Unsplasharp.UnsplasharpClient.GetCollection(string)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetCollection
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 751
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Returns the photos collection corresponding to the given id.
  example: []
  syntax:
    content: public Task<Collection?> GetCollection(string id)
    parameters:
    - id: id
      type: System.String
      description: Collection's id to find.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Collection}
      description: A new collection instance.
    content.vb: Public Function GetCollection(id As String) As Task(Of Collection)
  overload: Unsplasharp.UnsplasharpClient.GetCollection*
  nameWithType.vb: UnsplasharpClient.GetCollection(String)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetCollection(String)
  name.vb: GetCollection(String)
- uid: Unsplasharp.UnsplasharpClient.GetCollection(System.String,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.GetCollection(System.String,System.Threading.CancellationToken)
  id: GetCollection(System.String,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetCollection(string, CancellationToken)
  nameWithType: UnsplasharpClient.GetCollection(string, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.GetCollection(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetCollection
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 761
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Returns the photos collection corresponding to the given id.
  example: []
  syntax:
    content: public Task<Collection?> GetCollection(string id, CancellationToken cancellationToken)
    parameters:
    - id: id
      type: System.String
      description: Collection's id to find.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.Collection}
      description: A new collection instance.
    content.vb: Public Function GetCollection(id As String, cancellationToken As CancellationToken) As Task(Of Collection)
  overload: Unsplasharp.UnsplasharpClient.GetCollection*
  nameWithType.vb: UnsplasharpClient.GetCollection(String, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetCollection(String, System.Threading.CancellationToken)
  name.vb: GetCollection(String, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.GetCollectionPhotos(System.String,System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.GetCollectionPhotos(System.String,System.Int32,System.Int32)
  id: GetCollectionPhotos(System.String,System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetCollectionPhotos(string, int, int)
  nameWithType: UnsplasharpClient.GetCollectionPhotos(string, int, int)
  fullName: Unsplasharp.UnsplasharpClient.GetCollectionPhotos(string, int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetCollectionPhotos
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 778
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Retrieve a collection’s photos.
  example: []
  syntax:
    content: public Task<List<Photo>> GetCollectionPhotos(string id, int page = 1, int perPage = 10)
    parameters:
    - id: id
      type: System.String
      description: The collection’s ID.
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: 'Number of items per page. (Max: 30)'
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of photos in the collection
    content.vb: Public Function GetCollectionPhotos(id As String, page As Integer = 1, perPage As Integer = 10) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.GetCollectionPhotos*
  nameWithType.vb: UnsplasharpClient.GetCollectionPhotos(String, Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetCollectionPhotos(String, Integer, Integer)
  name.vb: GetCollectionPhotos(String, Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.GetCollectionPhotos(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.GetCollectionPhotos(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetCollectionPhotos(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetCollectionPhotos(string, int, int, CancellationToken)
  nameWithType: UnsplasharpClient.GetCollectionPhotos(string, int, int, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.GetCollectionPhotos(string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetCollectionPhotos
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 790
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Retrieve a collection's photos.
  example: []
  syntax:
    content: public Task<List<Photo>> GetCollectionPhotos(string id, int page, int perPage, CancellationToken cancellationToken)
    parameters:
    - id: id
      type: System.String
      description: The collection's ID.
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: 'Number of items per page. (Max: 30)'
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of photos in the collection
    content.vb: Public Function GetCollectionPhotos(id As String, page As Integer, perPage As Integer, cancellationToken As CancellationToken) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.GetCollectionPhotos*
  nameWithType.vb: UnsplasharpClient.GetCollectionPhotos(String, Integer, Integer, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetCollectionPhotos(String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: GetCollectionPhotos(String, Integer, Integer, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.ListCollections(System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.ListCollections(System.Int32,System.Int32)
  id: ListCollections(System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: ListCollections(int, int)
  nameWithType: UnsplasharpClient.ListCollections(int, int)
  fullName: Unsplasharp.UnsplasharpClient.ListCollections(int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: ListCollections
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 804
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a single page from the list of all collections.
  example: []
  syntax:
    content: public Task<List<Collection>> ListCollections(int page = 1, int perPage = 10)
    parameters:
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: 'Number of items per page. (Max: 30)'
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
      description: List of recent collections
    content.vb: Public Function ListCollections(page As Integer = 1, perPage As Integer = 10) As Task(Of List(Of Collection))
  overload: Unsplasharp.UnsplasharpClient.ListCollections*
  nameWithType.vb: UnsplasharpClient.ListCollections(Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.ListCollections(Integer, Integer)
  name.vb: ListCollections(Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.ListCollections(System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.ListCollections(System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ListCollections(System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: ListCollections(int, int, CancellationToken)
  nameWithType: UnsplasharpClient.ListCollections(int, int, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.ListCollections(int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: ListCollections
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 815
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a single page from the list of all collections.
  example: []
  syntax:
    content: public Task<List<Collection>> ListCollections(int page, int perPage, CancellationToken cancellationToken)
    parameters:
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: 'Number of items per page. (Max: 30)'
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
      description: List of recent collections
    content.vb: Public Function ListCollections(page As Integer, perPage As Integer, cancellationToken As CancellationToken) As Task(Of List(Of Collection))
  overload: Unsplasharp.UnsplasharpClient.ListCollections*
  nameWithType.vb: UnsplasharpClient.ListCollections(Integer, Integer, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.ListCollections(Integer, Integer, System.Threading.CancellationToken)
  name.vb: ListCollections(Integer, Integer, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.ListFeaturedCollections(System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.ListFeaturedCollections(System.Int32,System.Int32)
  id: ListFeaturedCollections(System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: ListFeaturedCollections(int, int)
  nameWithType: UnsplasharpClient.ListFeaturedCollections(int, int)
  fullName: Unsplasharp.UnsplasharpClient.ListFeaturedCollections(int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: ListFeaturedCollections
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 829
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a single page from the list of featured collections.
  example: []
  syntax:
    content: public Task<List<Collection>> ListFeaturedCollections(int page = 1, int perPage = 10)
    parameters:
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: 'Number of items per page. (Max: 30)'
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
      description: A list of collections.
    content.vb: Public Function ListFeaturedCollections(page As Integer = 1, perPage As Integer = 10) As Task(Of List(Of Collection))
  overload: Unsplasharp.UnsplasharpClient.ListFeaturedCollections*
  nameWithType.vb: UnsplasharpClient.ListFeaturedCollections(Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.ListFeaturedCollections(Integer, Integer)
  name.vb: ListFeaturedCollections(Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.ListFeaturedCollections(System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.ListFeaturedCollections(System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ListFeaturedCollections(System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: ListFeaturedCollections(int, int, CancellationToken)
  nameWithType: UnsplasharpClient.ListFeaturedCollections(int, int, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.ListFeaturedCollections(int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: ListFeaturedCollections
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 840
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a single page from the list of featured collections.
  example: []
  syntax:
    content: public Task<List<Collection>> ListFeaturedCollections(int page, int perPage, CancellationToken cancellationToken)
    parameters:
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: 'Number of items per page. (Max: 30)'
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
      description: A list of collections.
    content.vb: Public Function ListFeaturedCollections(page As Integer, perPage As Integer, cancellationToken As CancellationToken) As Task(Of List(Of Collection))
  overload: Unsplasharp.UnsplasharpClient.ListFeaturedCollections*
  nameWithType.vb: UnsplasharpClient.ListFeaturedCollections(Integer, Integer, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.ListFeaturedCollections(Integer, Integer, System.Threading.CancellationToken)
  name.vb: ListFeaturedCollections(Integer, Integer, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.ListRelatedCollections(System.String)
  commentId: M:Unsplasharp.UnsplasharpClient.ListRelatedCollections(System.String)
  id: ListRelatedCollections(System.String)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: ListRelatedCollections(string)
  nameWithType: UnsplasharpClient.ListRelatedCollections(string)
  fullName: Unsplasharp.UnsplasharpClient.ListRelatedCollections(string)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: ListRelatedCollections
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 853
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a collection's related collections.
  example: []
  syntax:
    content: public Task<List<Collection>> ListRelatedCollections(string id)
    parameters:
    - id: id
      type: System.String
      description: The collection’s ID.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
      description: A list of collections.
    content.vb: Public Function ListRelatedCollections(id As String) As Task(Of List(Of Collection))
  overload: Unsplasharp.UnsplasharpClient.ListRelatedCollections*
  nameWithType.vb: UnsplasharpClient.ListRelatedCollections(String)
  fullName.vb: Unsplasharp.UnsplasharpClient.ListRelatedCollections(String)
  name.vb: ListRelatedCollections(String)
- uid: Unsplasharp.UnsplasharpClient.ListRelatedCollections(System.String,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.ListRelatedCollections(System.String,System.Threading.CancellationToken)
  id: ListRelatedCollections(System.String,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: ListRelatedCollections(string, CancellationToken)
  nameWithType: UnsplasharpClient.ListRelatedCollections(string, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.ListRelatedCollections(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: ListRelatedCollections
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 863
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a collection's related collections.
  example: []
  syntax:
    content: public Task<List<Collection>> ListRelatedCollections(string id, CancellationToken cancellationToken)
    parameters:
    - id: id
      type: System.String
      description: The collection's ID.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
      description: A list of collections.
    content.vb: Public Function ListRelatedCollections(id As String, cancellationToken As CancellationToken) As Task(Of List(Of Collection))
  overload: Unsplasharp.UnsplasharpClient.ListRelatedCollections*
  nameWithType.vb: UnsplasharpClient.ListRelatedCollections(String, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.ListRelatedCollections(String, System.Threading.CancellationToken)
  name.vb: ListRelatedCollections(String, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.GetUser(System.String,System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.GetUser(System.String,System.Int32,System.Int32)
  id: GetUser(System.String,System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetUser(string, int, int)
  nameWithType: UnsplasharpClient.GetUser(string, int, int)
  fullName: Unsplasharp.UnsplasharpClient.GetUser(string, int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetUser
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 878
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Return the User corresponding to the given username.
  example: []
  syntax:
    content: public Task<User?> GetUser(string username, int width = 0, int height = 0)
    parameters:
    - id: username
      type: System.String
      description: The user’s username to find. Required.
    - id: width
      type: System.Int32
      description: Profile image width in pixels.
    - id: height
      type: System.Int32
      description: Profile image height in pixels.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.User}
      description: User corresponding to the username if found.
    content.vb: Public Function GetUser(username As String, width As Integer = 0, height As Integer = 0) As Task(Of User)
  overload: Unsplasharp.UnsplasharpClient.GetUser*
  nameWithType.vb: UnsplasharpClient.GetUser(String, Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetUser(String, Integer, Integer)
  name.vb: GetUser(String, Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.GetUser(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.GetUser(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: GetUser(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetUser(string, int, int, CancellationToken)
  nameWithType: UnsplasharpClient.GetUser(string, int, int, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.GetUser(string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetUser
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 890
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Return the User corresponding to the given username.
  example: []
  syntax:
    content: public Task<User?> GetUser(string username, int width, int height, CancellationToken cancellationToken)
    parameters:
    - id: username
      type: System.String
      description: The user's username to find. Required.
    - id: width
      type: System.Int32
      description: Profile image width in pixels.
    - id: height
      type: System.Int32
      description: Profile image height in pixels.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.User}
      description: User corresponding to the username if found.
    content.vb: Public Function GetUser(username As String, width As Integer, height As Integer, cancellationToken As CancellationToken) As Task(Of User)
  overload: Unsplasharp.UnsplasharpClient.GetUser*
  nameWithType.vb: UnsplasharpClient.GetUser(String, Integer, Integer, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetUser(String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: GetUser(String, Integer, Integer, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.GetUserPorfolioLink(System.String)
  commentId: M:Unsplasharp.UnsplasharpClient.GetUserPorfolioLink(System.String)
  id: GetUserPorfolioLink(System.String)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetUserPorfolioLink(string)
  nameWithType: UnsplasharpClient.GetUserPorfolioLink(string)
  fullName: Unsplasharp.UnsplasharpClient.GetUserPorfolioLink(string)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetUserPorfolioLink
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 909
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Retrieve a single user’s portfolio link.
  example: []
  syntax:
    content: public Task<string?> GetUserPorfolioLink(string username)
    parameters:
    - id: username
      type: System.String
      description: User's name to get portfolio link from.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: The user's porfolio link
    content.vb: Public Function GetUserPorfolioLink(username As String) As Task(Of String)
  overload: Unsplasharp.UnsplasharpClient.GetUserPorfolioLink*
  nameWithType.vb: UnsplasharpClient.GetUserPorfolioLink(String)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetUserPorfolioLink(String)
  name.vb: GetUserPorfolioLink(String)
- uid: Unsplasharp.UnsplasharpClient.ListUserPhotos(System.String,System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy,System.Boolean,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.ListUserPhotos(System.String,System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy,System.Boolean,System.Int32)
  id: ListUserPhotos(System.String,System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy,System.Boolean,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: ListUserPhotos(string, int, int, OrderBy, bool, int)
  nameWithType: UnsplasharpClient.ListUserPhotos(string, int, int, UnsplasharpClient.OrderBy, bool, int)
  fullName: Unsplasharp.UnsplasharpClient.ListUserPhotos(string, int, int, Unsplasharp.UnsplasharpClient.OrderBy, bool, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: ListUserPhotos
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 929
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a list of photos uploaded by a user.
  example: []
  syntax:
    content: public Task<List<Photo>> ListUserPhotos(string username, int page = 1, int perPage = 10, UnsplasharpClient.OrderBy orderBy = OrderBy.Latest, bool stats = false, int quantity = 30)
    parameters:
    - id: username
      type: System.String
      description: Username to get photos from
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: Number of items per page.
    - id: orderBy
      type: Unsplasharp.UnsplasharpClient.OrderBy
      description: How to sort the photos.
    - id: stats
      type: System.Boolean
      description: Show the stats for each user’s photo.
    - id: quantity
      type: System.Int32
      description: The amount of for each stat.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of user's photos.
    content.vb: Public Function ListUserPhotos(username As String, page As Integer = 1, perPage As Integer = 10, orderBy As UnsplasharpClient.OrderBy = OrderBy.Latest, stats As Boolean = False, quantity As Integer = 30) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.ListUserPhotos*
  nameWithType.vb: UnsplasharpClient.ListUserPhotos(String, Integer, Integer, UnsplasharpClient.OrderBy, Boolean, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.ListUserPhotos(String, Integer, Integer, Unsplasharp.UnsplasharpClient.OrderBy, Boolean, Integer)
  name.vb: ListUserPhotos(String, Integer, Integer, OrderBy, Boolean, Integer)
- uid: Unsplasharp.UnsplasharpClient.ListUserLikedPhotos(System.String,System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy)
  commentId: M:Unsplasharp.UnsplasharpClient.ListUserLikedPhotos(System.String,System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy)
  id: ListUserLikedPhotos(System.String,System.Int32,System.Int32,Unsplasharp.UnsplasharpClient.OrderBy)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: ListUserLikedPhotos(string, int, int, OrderBy)
  nameWithType: UnsplasharpClient.ListUserLikedPhotos(string, int, int, UnsplasharpClient.OrderBy)
  fullName: Unsplasharp.UnsplasharpClient.ListUserLikedPhotos(string, int, int, Unsplasharp.UnsplasharpClient.OrderBy)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: ListUserLikedPhotos
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 947
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a list of photos liked by a user.
  example: []
  syntax:
    content: public Task<List<Photo>> ListUserLikedPhotos(string username, int page = 1, int perPage = 10, UnsplasharpClient.OrderBy orderBy = OrderBy.Latest)
    parameters:
    - id: username
      type: System.String
      description: Username to get photos from
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: Number of items per page.
    - id: orderBy
      type: Unsplasharp.UnsplasharpClient.OrderBy
      description: How to sort the photos.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of user's liked photos.
    content.vb: Public Function ListUserLikedPhotos(username As String, page As Integer = 1, perPage As Integer = 10, orderBy As UnsplasharpClient.OrderBy = OrderBy.Latest) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.ListUserLikedPhotos*
  nameWithType.vb: UnsplasharpClient.ListUserLikedPhotos(String, Integer, Integer, UnsplasharpClient.OrderBy)
  fullName.vb: Unsplasharp.UnsplasharpClient.ListUserLikedPhotos(String, Integer, Integer, Unsplasharp.UnsplasharpClient.OrderBy)
  name.vb: ListUserLikedPhotos(String, Integer, Integer, OrderBy)
- uid: Unsplasharp.UnsplasharpClient.ListUserCollections(System.String,System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.ListUserCollections(System.String,System.Int32,System.Int32)
  id: ListUserCollections(System.String,System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: ListUserCollections(string, int, int)
  nameWithType: UnsplasharpClient.ListUserCollections(string, int, int)
  fullName: Unsplasharp.UnsplasharpClient.ListUserCollections(string, int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: ListUserCollections
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 964
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get all photos collections of an user.
  example: []
  syntax:
    content: public Task<List<Collection>> ListUserCollections(string username, int page = 1, int perPage = 10)
    parameters:
    - id: username
      type: System.String
      description: Name of the user to get collections from
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: Number of items per page.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
      description: List of user's collections
    content.vb: Public Function ListUserCollections(username As String, page As Integer = 1, perPage As Integer = 10) As Task(Of List(Of Collection))
  overload: Unsplasharp.UnsplasharpClient.ListUserCollections*
  nameWithType.vb: UnsplasharpClient.ListUserCollections(String, Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.ListUserCollections(String, Integer, Integer)
  name.vb: ListUserCollections(String, Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.GetUserStats(System.String,Unsplasharp.UnsplasharpClient.Resolution,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.GetUserStats(System.String,Unsplasharp.UnsplasharpClient.Resolution,System.Int32)
  id: GetUserStats(System.String,Unsplasharp.UnsplasharpClient.Resolution,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetUserStats(string, Resolution, int)
  nameWithType: UnsplasharpClient.GetUserStats(string, UnsplasharpClient.Resolution, int)
  fullName: Unsplasharp.UnsplasharpClient.GetUserStats(string, Unsplasharp.UnsplasharpClient.Resolution, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetUserStats
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 982
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: >-
    Retrieve the consolidated number of downloads, 

    views and likes of all user’s photos, 

    as well as the historical breakdown and average of these stats 

    in a specific timeframe (default is 30 days).
  example: []
  syntax:
    content: public Task<UserStats?> GetUserStats(string username, UnsplasharpClient.Resolution resolution = Resolution.Days, int quantity = 30)
    parameters:
    - id: username
      type: System.String
      description: The user’s username. Required.
    - id: resolution
      type: Unsplasharp.UnsplasharpClient.Resolution
      description: 'The frequency of the stats. (Optional; default: “days”).'
    - id: quantity
      type: System.Int32
      description: 'The amount of for each stat. (Optional; default: 30)'
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.UserStats}
      description: User's statistics
    content.vb: Public Function GetUserStats(username As String, resolution As UnsplasharpClient.Resolution = Resolution.Days, quantity As Integer = 30) As Task(Of UserStats)
  overload: Unsplasharp.UnsplasharpClient.GetUserStats*
  nameWithType.vb: UnsplasharpClient.GetUserStats(String, UnsplasharpClient.Resolution, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.GetUserStats(String, Unsplasharp.UnsplasharpClient.Resolution, Integer)
  name.vb: GetUserStats(String, Resolution, Integer)
- uid: Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.Int32,System.Int32)
  id: SearchPhotos(System.String,System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: SearchPhotos(string, int, int)
  nameWithType: UnsplasharpClient.SearchPhotos(string, int, int)
  fullName: Unsplasharp.UnsplasharpClient.SearchPhotos(string, int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: SearchPhotos
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1020
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a single page of photo results for a query.
  example: []
  syntax:
    content: public Task<List<Photo>> SearchPhotos(string query, int page = 1, int perPage = 10)
    parameters:
    - id: query
      type: System.String
      description: Search terms.
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: Number of items per page.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of photos found.
    content.vb: Public Function SearchPhotos(query As String, page As Integer = 1, perPage As Integer = 10) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.SearchPhotos*
  nameWithType.vb: UnsplasharpClient.SearchPhotos(String, Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.SearchPhotos(String, Integer, Integer)
  name.vb: SearchPhotos(String, Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: SearchPhotos(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: SearchPhotos(string, int, int, CancellationToken)
  nameWithType: UnsplasharpClient.SearchPhotos(string, int, int, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.SearchPhotos(string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: SearchPhotos
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1032
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a single page of photo results for a query.
  example: []
  syntax:
    content: public Task<List<Photo>> SearchPhotos(string query, int page, int perPage, CancellationToken cancellationToken)
    parameters:
    - id: query
      type: System.String
      description: Search terms.
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: Number of items per page.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of photos found.
    content.vb: Public Function SearchPhotos(query As String, page As Integer, perPage As Integer, cancellationToken As CancellationToken) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.SearchPhotos*
  nameWithType.vb: UnsplasharpClient.SearchPhotos(String, Integer, Integer, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.SearchPhotos(String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: SearchPhotos(String, Integer, Integer, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.String,System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.String,System.Int32,System.Int32)
  id: SearchPhotos(System.String,System.String,System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: SearchPhotos(string, string, int, int)
  nameWithType: UnsplasharpClient.SearchPhotos(string, string, int, int)
  fullName: Unsplasharp.UnsplasharpClient.SearchPhotos(string, string, int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: SearchPhotos
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1057
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a single page of photo results for a query.
  example: []
  syntax:
    content: public Task<List<Photo>> SearchPhotos(string query, string collectionId, int page = 1, int perPage = 10)
    parameters:
    - id: query
      type: System.String
      description: Search terms.
    - id: collectionId
      type: System.String
      description: Collection ID to narrow search.
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: Number of items per page.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of photos found.
    content.vb: Public Function SearchPhotos(query As String, collectionId As String, page As Integer = 1, perPage As Integer = 10) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.SearchPhotos*
  nameWithType.vb: UnsplasharpClient.SearchPhotos(String, String, Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.SearchPhotos(String, String, Integer, Integer)
  name.vb: SearchPhotos(String, String, Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: SearchPhotos(System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: SearchPhotos(string, string, int, int, CancellationToken)
  nameWithType: UnsplasharpClient.SearchPhotos(string, string, int, int, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.SearchPhotos(string, string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: SearchPhotos
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1070
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a single page of photo results for a query.
  example: []
  syntax:
    content: public Task<List<Photo>> SearchPhotos(string query, string collectionId, int page, int perPage, CancellationToken cancellationToken)
    parameters:
    - id: query
      type: System.String
      description: Search terms.
    - id: collectionId
      type: System.String
      description: Collection ID to narrow search.
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: Number of items per page.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of photos found.
    content.vb: Public Function SearchPhotos(query As String, collectionId As String, page As Integer, perPage As Integer, cancellationToken As CancellationToken) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.SearchPhotos*
  nameWithType.vb: UnsplasharpClient.SearchPhotos(String, String, Integer, Integer, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.SearchPhotos(String, String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: SearchPhotos(String, String, Integer, Integer, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.String[],System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.String[],System.Int32,System.Int32)
  id: SearchPhotos(System.String,System.String[],System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: SearchPhotos(string, string[], int, int)
  nameWithType: UnsplasharpClient.SearchPhotos(string, string[], int, int)
  fullName: Unsplasharp.UnsplasharpClient.SearchPhotos(string, string[], int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: SearchPhotos
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1087
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a single page of photo results for a query.
  example: []
  syntax:
    content: public Task<List<Photo>> SearchPhotos(string query, string[] collectionIds, int page = 1, int perPage = 10)
    parameters:
    - id: query
      type: System.String
      description: Search terms.
    - id: collectionIds
      type: System.String[]
      description: Collection ID's to narrow search.
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: Number of items per page.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of photos found.
    content.vb: Public Function SearchPhotos(query As String, collectionIds As String(), page As Integer = 1, perPage As Integer = 10) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.SearchPhotos*
  nameWithType.vb: UnsplasharpClient.SearchPhotos(String, String(), Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.SearchPhotos(String, String(), Integer, Integer)
  name.vb: SearchPhotos(String, String(), Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.SearchPhotos(System.String,System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: SearchPhotos(System.String,System.String[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: SearchPhotos(string, string[], int, int, CancellationToken)
  nameWithType: UnsplasharpClient.SearchPhotos(string, string[], int, int, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.SearchPhotos(string, string[], int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: SearchPhotos
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1100
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a single page of photo results for a query.
  example: []
  syntax:
    content: public Task<List<Photo>> SearchPhotos(string query, string[] collectionIds, int page, int perPage, CancellationToken cancellationToken)
    parameters:
    - id: query
      type: System.String
      description: Search terms.
    - id: collectionIds
      type: System.String[]
      description: Collection ID's to narrow search.
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: Number of items per page.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of photos found.
    content.vb: Public Function SearchPhotos(query As String, collectionIds As String(), page As Integer, perPage As Integer, cancellationToken As CancellationToken) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.SearchPhotos*
  nameWithType.vb: UnsplasharpClient.SearchPhotos(String, String(), Integer, Integer, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.SearchPhotos(String, String(), Integer, Integer, System.Threading.CancellationToken)
  name.vb: SearchPhotos(String, String(), Integer, Integer, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.SearchCollections(System.String,System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.SearchCollections(System.String,System.Int32,System.Int32)
  id: SearchCollections(System.String,System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: SearchCollections(string, int, int)
  nameWithType: UnsplasharpClient.SearchCollections(string, int, int)
  fullName: Unsplasharp.UnsplasharpClient.SearchCollections(string, int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: SearchCollections
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1116
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a single page of collection results for a query.
  example: []
  syntax:
    content: public Task<List<Collection>> SearchCollections(string query, int page = 1, int perPage = 10)
    parameters:
    - id: query
      type: System.String
      description: Search terms.
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: Number of items per page.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
      description: A list of collections found.
    content.vb: Public Function SearchCollections(query As String, page As Integer = 1, perPage As Integer = 10) As Task(Of List(Of Collection))
  overload: Unsplasharp.UnsplasharpClient.SearchCollections*
  nameWithType.vb: UnsplasharpClient.SearchCollections(String, Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.SearchCollections(String, Integer, Integer)
  name.vb: SearchCollections(String, Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.SearchCollections(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.SearchCollections(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: SearchCollections(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: SearchCollections(string, int, int, CancellationToken)
  nameWithType: UnsplasharpClient.SearchCollections(string, int, int, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.SearchCollections(string, int, int, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: SearchCollections
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1128
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a single page of collection results for a query.
  example: []
  syntax:
    content: public Task<List<Collection>> SearchCollections(string query, int page, int perPage, CancellationToken cancellationToken)
    parameters:
    - id: query
      type: System.String
      description: Search terms.
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: Number of items per page.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
      description: A list of collections found.
    content.vb: Public Function SearchCollections(query As String, page As Integer, perPage As Integer, cancellationToken As CancellationToken) As Task(Of List(Of Collection))
  overload: Unsplasharp.UnsplasharpClient.SearchCollections*
  nameWithType.vb: UnsplasharpClient.SearchCollections(String, Integer, Integer, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.SearchCollections(String, Integer, Integer, System.Threading.CancellationToken)
  name.vb: SearchCollections(String, Integer, Integer, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.SearchUsers(System.String,System.Int32,System.Int32)
  commentId: M:Unsplasharp.UnsplasharpClient.SearchUsers(System.String,System.Int32,System.Int32)
  id: SearchUsers(System.String,System.Int32,System.Int32)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: SearchUsers(string, int, int)
  nameWithType: UnsplasharpClient.SearchUsers(string, int, int)
  fullName: Unsplasharp.UnsplasharpClient.SearchUsers(string, int, int)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: SearchUsers
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1144
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a single page of user results for a query.
  example: []
  syntax:
    content: public Task<List<User>> SearchUsers(string query, int page = 1, int perPage = 10)
    parameters:
    - id: query
      type: System.String
      description: Search terms.
    - id: page
      type: System.Int32
      description: Page number to retrieve.
    - id: perPage
      type: System.Int32
      description: Number of items per page.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.User}}
      description: A list of users found.
    content.vb: Public Function SearchUsers(query As String, page As Integer = 1, perPage As Integer = 10) As Task(Of List(Of User))
  overload: Unsplasharp.UnsplasharpClient.SearchUsers*
  nameWithType.vb: UnsplasharpClient.SearchUsers(String, Integer, Integer)
  fullName.vb: Unsplasharp.UnsplasharpClient.SearchUsers(String, Integer, Integer)
  name.vb: SearchUsers(String, Integer, Integer)
- uid: Unsplasharp.UnsplasharpClient.FetchSearchPhotosList(System.String)
  commentId: M:Unsplasharp.UnsplasharpClient.FetchSearchPhotosList(System.String)
  id: FetchSearchPhotosList(System.String)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: FetchSearchPhotosList(string)
  nameWithType: UnsplasharpClient.FetchSearchPhotosList(string)
  fullName: Unsplasharp.UnsplasharpClient.FetchSearchPhotosList(string)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: FetchSearchPhotosList
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1158
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Return a list of found photos from a search query.
  example: []
  syntax:
    content: public Task<List<Photo>> FetchSearchPhotosList(string url)
    parameters:
    - id: url
      type: System.String
      description: API endpoint to fetch the photos' list. Must be a search url.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of photos found.
    content.vb: Public Function FetchSearchPhotosList(url As String) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.FetchSearchPhotosList*
  nameWithType.vb: UnsplasharpClient.FetchSearchPhotosList(String)
  fullName.vb: Unsplasharp.UnsplasharpClient.FetchSearchPhotosList(String)
  name.vb: FetchSearchPhotosList(String)
- uid: Unsplasharp.UnsplasharpClient.FetchSearchPhotosList(System.String,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.FetchSearchPhotosList(System.String,System.Threading.CancellationToken)
  id: FetchSearchPhotosList(System.String,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: FetchSearchPhotosList(string, CancellationToken)
  nameWithType: UnsplasharpClient.FetchSearchPhotosList(string, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.FetchSearchPhotosList(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: FetchSearchPhotosList
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1168
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Return a list of found photos from a search query.
  example: []
  syntax:
    content: public Task<List<Photo>> FetchSearchPhotosList(string url, CancellationToken cancellationToken)
    parameters:
    - id: url
      type: System.String
      description: API endpoint to fetch the photos' list. Must be a search url.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
      description: A list of photos found.
    content.vb: Public Function FetchSearchPhotosList(url As String, cancellationToken As CancellationToken) As Task(Of List(Of Photo))
  overload: Unsplasharp.UnsplasharpClient.FetchSearchPhotosList*
  nameWithType.vb: UnsplasharpClient.FetchSearchPhotosList(String, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.FetchSearchPhotosList(String, System.Threading.CancellationToken)
  name.vb: FetchSearchPhotosList(String, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList(System.String)
  commentId: M:Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList(System.String)
  id: FetchSearcCollectionsList(System.String)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: FetchSearcCollectionsList(string)
  nameWithType: UnsplasharpClient.FetchSearcCollectionsList(string)
  fullName: Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList(string)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: FetchSearcCollectionsList
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1209
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Return a list of found collections from a search query.
  example: []
  syntax:
    content: public Task<List<Collection>> FetchSearcCollectionsList(string url)
    parameters:
    - id: url
      type: System.String
      description: API endpoint to fetch the collections' list. Must be a search url.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
      description: A list of collections found.
    content.vb: Public Function FetchSearcCollectionsList(url As String) As Task(Of List(Of Collection))
  overload: Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList*
  nameWithType.vb: UnsplasharpClient.FetchSearcCollectionsList(String)
  fullName.vb: Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList(String)
  name.vb: FetchSearcCollectionsList(String)
- uid: Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList(System.String,System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList(System.String,System.Threading.CancellationToken)
  id: FetchSearcCollectionsList(System.String,System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: FetchSearcCollectionsList(string, CancellationToken)
  nameWithType: UnsplasharpClient.FetchSearcCollectionsList(string, CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList(string, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: FetchSearcCollectionsList
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1219
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Return a list of found collections from a search query.
  example: []
  syntax:
    content: public Task<List<Collection>> FetchSearcCollectionsList(string url, CancellationToken cancellationToken)
    parameters:
    - id: url
      type: System.String
      description: API endpoint to fetch the collections' list. Must be a search url.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
      description: A list of collections found.
    content.vb: Public Function FetchSearcCollectionsList(url As String, cancellationToken As CancellationToken) As Task(Of List(Of Collection))
  overload: Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList*
  nameWithType.vb: UnsplasharpClient.FetchSearcCollectionsList(String, CancellationToken)
  fullName.vb: Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList(String, System.Threading.CancellationToken)
  name.vb: FetchSearcCollectionsList(String, CancellationToken)
- uid: Unsplasharp.UnsplasharpClient.FetchSearcUsersList(System.String)
  commentId: M:Unsplasharp.UnsplasharpClient.FetchSearcUsersList(System.String)
  id: FetchSearcUsersList(System.String)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: FetchSearcUsersList(string)
  nameWithType: UnsplasharpClient.FetchSearcUsersList(string)
  fullName: Unsplasharp.UnsplasharpClient.FetchSearcUsersList(string)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: FetchSearcUsersList
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1260
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Return a list of found users from a search query.
  example: []
  syntax:
    content: public Task<List<User>> FetchSearcUsersList(string url)
    parameters:
    - id: url
      type: System.String
      description: API endpoint to fetch the users' list. Must be a search url.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.User}}
      description: A list of users found.
    content.vb: Public Function FetchSearcUsersList(url As String) As Task(Of List(Of User))
  overload: Unsplasharp.UnsplasharpClient.FetchSearcUsersList*
  nameWithType.vb: UnsplasharpClient.FetchSearcUsersList(String)
  fullName.vb: Unsplasharp.UnsplasharpClient.FetchSearcUsersList(String)
  name.vb: FetchSearcUsersList(String)
- uid: Unsplasharp.UnsplasharpClient.GetTotalStats
  commentId: M:Unsplasharp.UnsplasharpClient.GetTotalStats
  id: GetTotalStats
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetTotalStats()
  nameWithType: UnsplasharpClient.GetTotalStats()
  fullName: Unsplasharp.UnsplasharpClient.GetTotalStats()
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetTotalStats
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1302
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a list of counts for all of Unsplash.
  example: []
  syntax:
    content: public Task<UnplashTotalStats?> GetTotalStats()
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.UnplashTotalStats}
      description: A list of Unplash's stats.
    content.vb: Public Function GetTotalStats() As Task(Of UnplashTotalStats)
  overload: Unsplasharp.UnsplasharpClient.GetTotalStats*
- uid: Unsplasharp.UnsplasharpClient.GetTotalStats(System.Threading.CancellationToken)
  commentId: M:Unsplasharp.UnsplasharpClient.GetTotalStats(System.Threading.CancellationToken)
  id: GetTotalStats(System.Threading.CancellationToken)
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetTotalStats(CancellationToken)
  nameWithType: UnsplasharpClient.GetTotalStats(CancellationToken)
  fullName: Unsplasharp.UnsplasharpClient.GetTotalStats(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetTotalStats
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1311
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get a list of counts for all of Unsplash.
  example: []
  syntax:
    content: public Task<UnplashTotalStats?> GetTotalStats(CancellationToken cancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token to cancel the request.
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.UnplashTotalStats}
      description: A list of Unplash's stats.
    content.vb: Public Function GetTotalStats(cancellationToken As CancellationToken) As Task(Of UnplashTotalStats)
  overload: Unsplasharp.UnsplasharpClient.GetTotalStats*
- uid: Unsplasharp.UnsplasharpClient.GetMonthlyStats
  commentId: M:Unsplasharp.UnsplasharpClient.GetMonthlyStats
  id: GetMonthlyStats
  parent: Unsplasharp.UnsplasharpClient
  langs:
  - csharp
  - vb
  name: GetMonthlyStats()
  nameWithType: UnsplasharpClient.GetMonthlyStats()
  fullName: Unsplasharp.UnsplasharpClient.GetMonthlyStats()
  type: Method
  source:
    remote:
      path: src/unsplasharp/Source/UnsplasharpClient.cs
      branch: master
      repo: https://github.com/rootasjey/unsplasharp.git
    id: GetMonthlyStats
    path: ../src/unsplasharp/Source/UnsplasharpClient.cs
    startLine: 1341
  assemblies:
  - Unsplasharp
  namespace: Unsplasharp
  summary: Get the overall Unsplash stats for the past 30 days.
  example: []
  syntax:
    content: public Task<UnplashMonthlyStats?> GetMonthlyStats()
    return:
      type: System.Threading.Tasks.Task{Unsplasharp.Models.UnplashMonthlyStats}
      description: A list of Unplash's stats.
    content.vb: Public Function GetMonthlyStats() As Task(Of UnplashMonthlyStats)
  overload: Unsplasharp.UnsplasharpClient.GetMonthlyStats*
references:
- uid: Unsplasharp
  commentId: N:Unsplasharp
  href: Unsplasharp.html
  name: Unsplasharp
  nameWithType: Unsplasharp
  fullName: Unsplasharp
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Unsplasharp.UnsplasharpClient.Secret*
  commentId: Overload:Unsplasharp.UnsplasharpClient.Secret
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_Secret
  name: Secret
  nameWithType: UnsplasharpClient.Secret
  fullName: Unsplasharp.UnsplasharpClient.Secret
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Unsplasharp.UnsplasharpClient.ApplicationId*
  commentId: Overload:Unsplasharp.UnsplasharpClient.ApplicationId
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_ApplicationId
  name: ApplicationId
  nameWithType: UnsplasharpClient.ApplicationId
  fullName: Unsplasharp.UnsplasharpClient.ApplicationId
- uid: Unsplasharp.UnsplasharpClient.MaxRateLimit*
  commentId: Overload:Unsplasharp.UnsplasharpClient.MaxRateLimit
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_MaxRateLimit
  name: MaxRateLimit
  nameWithType: UnsplasharpClient.MaxRateLimit
  fullName: Unsplasharp.UnsplasharpClient.MaxRateLimit
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Unsplasharp.UnsplasharpClient.RateLimitRemaining*
  commentId: Overload:Unsplasharp.UnsplasharpClient.RateLimitRemaining
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_RateLimitRemaining
  name: RateLimitRemaining
  nameWithType: UnsplasharpClient.RateLimitRemaining
  fullName: Unsplasharp.UnsplasharpClient.RateLimitRemaining
- uid: Unsplasharp.UnsplasharpClient.LastPhotosSearchQuery*
  commentId: Overload:Unsplasharp.UnsplasharpClient.LastPhotosSearchQuery
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_LastPhotosSearchQuery
  name: LastPhotosSearchQuery
  nameWithType: UnsplasharpClient.LastPhotosSearchQuery
  fullName: Unsplasharp.UnsplasharpClient.LastPhotosSearchQuery
- uid: Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalPages*
  commentId: Overload:Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalPages
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_LastPhotosSearchTotalPages
  name: LastPhotosSearchTotalPages
  nameWithType: UnsplasharpClient.LastPhotosSearchTotalPages
  fullName: Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalPages
- uid: Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalResults*
  commentId: Overload:Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalResults
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_LastPhotosSearchTotalResults
  name: LastPhotosSearchTotalResults
  nameWithType: UnsplasharpClient.LastPhotosSearchTotalResults
  fullName: Unsplasharp.UnsplasharpClient.LastPhotosSearchTotalResults
- uid: Unsplasharp.UnsplasharpClient.LastCollectionsSearchQuery*
  commentId: Overload:Unsplasharp.UnsplasharpClient.LastCollectionsSearchQuery
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_LastCollectionsSearchQuery
  name: LastCollectionsSearchQuery
  nameWithType: UnsplasharpClient.LastCollectionsSearchQuery
  fullName: Unsplasharp.UnsplasharpClient.LastCollectionsSearchQuery
- uid: Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalPages*
  commentId: Overload:Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalPages
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_LastCollectionsSearchTotalPages
  name: LastCollectionsSearchTotalPages
  nameWithType: UnsplasharpClient.LastCollectionsSearchTotalPages
  fullName: Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalPages
- uid: Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalResults*
  commentId: Overload:Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalResults
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_LastCollectionsSearchTotalResults
  name: LastCollectionsSearchTotalResults
  nameWithType: UnsplasharpClient.LastCollectionsSearchTotalResults
  fullName: Unsplasharp.UnsplasharpClient.LastCollectionsSearchTotalResults
- uid: Unsplasharp.UnsplasharpClient.LastUsersSearchQuery*
  commentId: Overload:Unsplasharp.UnsplasharpClient.LastUsersSearchQuery
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_LastUsersSearchQuery
  name: LastUsersSearchQuery
  nameWithType: UnsplasharpClient.LastUsersSearchQuery
  fullName: Unsplasharp.UnsplasharpClient.LastUsersSearchQuery
- uid: Unsplasharp.UnsplasharpClient.LastUsersSearchTotalPages*
  commentId: Overload:Unsplasharp.UnsplasharpClient.LastUsersSearchTotalPages
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_LastUsersSearchTotalPages
  name: LastUsersSearchTotalPages
  nameWithType: UnsplasharpClient.LastUsersSearchTotalPages
  fullName: Unsplasharp.UnsplasharpClient.LastUsersSearchTotalPages
- uid: Unsplasharp.UnsplasharpClient.LastUsersSearchTotalResults*
  commentId: Overload:Unsplasharp.UnsplasharpClient.LastUsersSearchTotalResults
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_LastUsersSearchTotalResults
  name: LastUsersSearchTotalResults
  nameWithType: UnsplasharpClient.LastUsersSearchTotalResults
  fullName: Unsplasharp.UnsplasharpClient.LastUsersSearchTotalResults
- uid: Unsplasharp.UnsplasharpClient.#ctor*
  commentId: Overload:Unsplasharp.UnsplasharpClient.#ctor
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient__ctor_System_String_System_String_Microsoft_Extensions_Logging_ILogger_Unsplasharp_UnsplasharpClient__System_Net_Http_IHttpClientFactory_
  name: UnsplasharpClient
  nameWithType: UnsplasharpClient.UnsplasharpClient
  fullName: Unsplasharp.UnsplasharpClient.UnsplasharpClient
  nameWithType.vb: UnsplasharpClient.New
  fullName.vb: Unsplasharp.UnsplasharpClient.New
  name.vb: New
- uid: Microsoft.Extensions.Logging.ILogger{Unsplasharp.UnsplasharpClient}
  commentId: T:Microsoft.Extensions.Logging.ILogger{Unsplasharp.UnsplasharpClient}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  name: ILogger<UnsplasharpClient>
  nameWithType: ILogger<UnsplasharpClient>
  fullName: Microsoft.Extensions.Logging.ILogger<Unsplasharp.UnsplasharpClient>
  nameWithType.vb: ILogger(Of UnsplasharpClient)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of Unsplasharp.UnsplasharpClient)
  name.vb: ILogger(Of UnsplasharpClient)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: <
  - uid: Unsplasharp.UnsplasharpClient
    name: UnsplasharpClient
    href: Unsplasharp.UnsplasharpClient.html
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: (
  - name: Of
  - name: " "
  - uid: Unsplasharp.UnsplasharpClient
    name: UnsplasharpClient
    href: Unsplasharp.UnsplasharpClient.html
  - name: )
- uid: System.Net.Http.IHttpClientFactory
  commentId: T:System.Net.Http.IHttpClientFactory
  parent: System.Net.Http
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.net.http.ihttpclientfactory
  name: IHttpClientFactory
  nameWithType: IHttpClientFactory
  fullName: System.Net.Http.IHttpClientFactory
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: <
  - name: TCategoryName
  - name: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger-1
  - name: (
  - name: Of
  - name: " "
  - name: TCategoryName
  - name: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/microsoft
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions
  - name: .
  - uid: Microsoft.Extensions.Logging
    name: Logging
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging
- uid: System.Net.Http
  commentId: N:System.Net.Http
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Net.Http
  nameWithType: System.Net.Http
  fullName: System.Net.Http
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Net
    name: Net
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net
  - name: .
  - uid: System.Net.Http
    name: Http
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Net
    name: Net
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net
  - name: .
  - uid: System.Net.Http
    name: Http
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.net.http
- uid: Unsplasharp.UnsplasharpClient.GetPhoto*
  commentId: Overload:Unsplasharp.UnsplasharpClient.GetPhoto
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_GetPhoto_System_String_System_Int32_System_Int32_
  name: GetPhoto
  nameWithType: UnsplasharpClient.GetPhoto
  fullName: Unsplasharp.UnsplasharpClient.GetPhoto
- uid: System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
  commentId: T:System.Threading.Tasks.Task{Unsplasharp.Models.Photo}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Photo>
  nameWithType: Task<Photo>
  fullName: System.Threading.Tasks.Task<Unsplasharp.Models.Photo>
  nameWithType.vb: Task(Of Photo)
  fullName.vb: System.Threading.Tasks.Task(Of Unsplasharp.Models.Photo)
  name.vb: Task(Of Photo)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Unsplasharp.Models.Photo
    name: Photo
    href: Unsplasharp.Models.Photo.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Unsplasharp.Models.Photo
    name: Photo
    href: Unsplasharp.Models.Photo.html
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: Unsplasharp.UnsplasharpClient.GetRandomPhoto*
  commentId: Overload:Unsplasharp.UnsplasharpClient.GetRandomPhoto
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_GetRandomPhoto
  name: GetRandomPhoto
  nameWithType: UnsplasharpClient.GetRandomPhoto
  fullName: Unsplasharp.UnsplasharpClient.GetRandomPhoto
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Photo}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<List<Photo>>
  nameWithType: Task<List<Photo>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Unsplasharp.Models.Photo>>
  nameWithType.vb: Task(Of List(Of Photo))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Unsplasharp.Models.Photo))
  name.vb: Task(Of List(Of Photo))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Unsplasharp.Models.Photo
    name: Photo
    href: Unsplasharp.Models.Photo.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Unsplasharp.Models.Photo
    name: Photo
    href: Unsplasharp.Models.Photo.html
  - name: )
  - name: )
- uid: Unsplasharp.UnsplasharpClient.Orientation
  commentId: T:Unsplasharp.UnsplasharpClient.Orientation
  parent: Unsplasharp
  href: Unsplasharp.UnsplasharpClient.html
  name: UnsplasharpClient.Orientation
  nameWithType: UnsplasharpClient.Orientation
  fullName: Unsplasharp.UnsplasharpClient.Orientation
  spec.csharp:
  - uid: Unsplasharp.UnsplasharpClient
    name: UnsplasharpClient
    href: Unsplasharp.UnsplasharpClient.html
  - name: .
  - uid: Unsplasharp.UnsplasharpClient.Orientation
    name: Orientation
    href: Unsplasharp.UnsplasharpClient.Orientation.html
  spec.vb:
  - uid: Unsplasharp.UnsplasharpClient
    name: UnsplasharpClient
    href: Unsplasharp.UnsplasharpClient.html
  - name: .
  - uid: Unsplasharp.UnsplasharpClient.Orientation
    name: Orientation
    href: Unsplasharp.UnsplasharpClient.Orientation.html
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Unsplasharp.UnsplasharpClient.GetPhotoStats*
  commentId: Overload:Unsplasharp.UnsplasharpClient.GetPhotoStats
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_GetPhotoStats_System_String_Unsplasharp_UnsplasharpClient_Resolution_System_Int32_
  name: GetPhotoStats
  nameWithType: UnsplasharpClient.GetPhotoStats
  fullName: Unsplasharp.UnsplasharpClient.GetPhotoStats
- uid: Unsplasharp.UnsplasharpClient.Resolution
  commentId: T:Unsplasharp.UnsplasharpClient.Resolution
  parent: Unsplasharp
  href: Unsplasharp.UnsplasharpClient.html
  name: UnsplasharpClient.Resolution
  nameWithType: UnsplasharpClient.Resolution
  fullName: Unsplasharp.UnsplasharpClient.Resolution
  spec.csharp:
  - uid: Unsplasharp.UnsplasharpClient
    name: UnsplasharpClient
    href: Unsplasharp.UnsplasharpClient.html
  - name: .
  - uid: Unsplasharp.UnsplasharpClient.Resolution
    name: Resolution
    href: Unsplasharp.UnsplasharpClient.Resolution.html
  spec.vb:
  - uid: Unsplasharp.UnsplasharpClient
    name: UnsplasharpClient
    href: Unsplasharp.UnsplasharpClient.html
  - name: .
  - uid: Unsplasharp.UnsplasharpClient.Resolution
    name: Resolution
    href: Unsplasharp.UnsplasharpClient.Resolution.html
- uid: System.Threading.Tasks.Task{Unsplasharp.Models.PhotoStats}
  commentId: T:System.Threading.Tasks.Task{Unsplasharp.Models.PhotoStats}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<PhotoStats>
  nameWithType: Task<PhotoStats>
  fullName: System.Threading.Tasks.Task<Unsplasharp.Models.PhotoStats>
  nameWithType.vb: Task(Of PhotoStats)
  fullName.vb: System.Threading.Tasks.Task(Of Unsplasharp.Models.PhotoStats)
  name.vb: Task(Of PhotoStats)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Unsplasharp.Models.PhotoStats
    name: PhotoStats
    href: Unsplasharp.Models.PhotoStats.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Unsplasharp.Models.PhotoStats
    name: PhotoStats
    href: Unsplasharp.Models.PhotoStats.html
  - name: )
- uid: Unsplasharp.UnsplasharpClient.GetPhotoDownloadLink*
  commentId: Overload:Unsplasharp.UnsplasharpClient.GetPhotoDownloadLink
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_GetPhotoDownloadLink_System_String_
  name: GetPhotoDownloadLink
  nameWithType: UnsplasharpClient.GetPhotoDownloadLink
  fullName: Unsplasharp.UnsplasharpClient.GetPhotoDownloadLink
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: Unsplasharp.UnsplasharpClient.ListPhotos*
  commentId: Overload:Unsplasharp.UnsplasharpClient.ListPhotos
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_ListPhotos_System_Int32_System_Int32_Unsplasharp_UnsplasharpClient_OrderBy_
  name: ListPhotos
  nameWithType: UnsplasharpClient.ListPhotos
  fullName: Unsplasharp.UnsplasharpClient.ListPhotos
- uid: Unsplasharp.UnsplasharpClient.OrderBy
  commentId: T:Unsplasharp.UnsplasharpClient.OrderBy
  parent: Unsplasharp
  href: Unsplasharp.UnsplasharpClient.html
  name: UnsplasharpClient.OrderBy
  nameWithType: UnsplasharpClient.OrderBy
  fullName: Unsplasharp.UnsplasharpClient.OrderBy
  spec.csharp:
  - uid: Unsplasharp.UnsplasharpClient
    name: UnsplasharpClient
    href: Unsplasharp.UnsplasharpClient.html
  - name: .
  - uid: Unsplasharp.UnsplasharpClient.OrderBy
    name: OrderBy
    href: Unsplasharp.UnsplasharpClient.OrderBy.html
  spec.vb:
  - uid: Unsplasharp.UnsplasharpClient
    name: UnsplasharpClient
    href: Unsplasharp.UnsplasharpClient.html
  - name: .
  - uid: Unsplasharp.UnsplasharpClient.OrderBy
    name: OrderBy
    href: Unsplasharp.UnsplasharpClient.OrderBy.html
- uid: Unsplasharp.UnsplasharpClient.FetchPhotosList*
  commentId: Overload:Unsplasharp.UnsplasharpClient.FetchPhotosList
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_FetchPhotosList_System_String_
  name: FetchPhotosList
  nameWithType: UnsplasharpClient.FetchPhotosList
  fullName: Unsplasharp.UnsplasharpClient.FetchPhotosList
- uid: Unsplasharp.UnsplasharpClient.FetchPhoto*
  commentId: Overload:Unsplasharp.UnsplasharpClient.FetchPhoto
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_FetchPhoto_System_String_
  name: FetchPhoto
  nameWithType: UnsplasharpClient.FetchPhoto
  fullName: Unsplasharp.UnsplasharpClient.FetchPhoto
- uid: Unsplasharp.Exceptions.UnsplasharpException
  commentId: T:Unsplasharp.Exceptions.UnsplasharpException
  parent: Unsplasharp.Exceptions
  href: Unsplasharp.Exceptions.UnsplasharpException.html
  name: UnsplasharpException
  nameWithType: UnsplasharpException
  fullName: Unsplasharp.Exceptions.UnsplasharpException
- uid: Unsplasharp.UnsplasharpClient.GetRandomPhotoAsync*
  commentId: Overload:Unsplasharp.UnsplasharpClient.GetRandomPhotoAsync
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_GetRandomPhotoAsync
  name: GetRandomPhotoAsync
  nameWithType: UnsplasharpClient.GetRandomPhotoAsync
  fullName: Unsplasharp.UnsplasharpClient.GetRandomPhotoAsync
- uid: Unsplasharp.Exceptions
  commentId: N:Unsplasharp.Exceptions
  href: Unsplasharp.html
  name: Unsplasharp.Exceptions
  nameWithType: Unsplasharp.Exceptions
  fullName: Unsplasharp.Exceptions
  spec.csharp:
  - uid: Unsplasharp
    name: Unsplasharp
    href: Unsplasharp.html
  - name: .
  - uid: Unsplasharp.Exceptions
    name: Exceptions
    href: Unsplasharp.Exceptions.html
  spec.vb:
  - uid: Unsplasharp
    name: Unsplasharp
    href: Unsplasharp.html
  - name: .
  - uid: Unsplasharp.Exceptions
    name: Exceptions
    href: Unsplasharp.Exceptions.html
- uid: Unsplasharp.Exceptions.UnsplasharpNotFoundException
  commentId: T:Unsplasharp.Exceptions.UnsplasharpNotFoundException
  href: Unsplasharp.Exceptions.UnsplasharpNotFoundException.html
  name: UnsplasharpNotFoundException
  nameWithType: UnsplasharpNotFoundException
  fullName: Unsplasharp.Exceptions.UnsplasharpNotFoundException
- uid: Unsplasharp.UnsplasharpClient.GetPhotoAsync*
  commentId: Overload:Unsplasharp.UnsplasharpClient.GetPhotoAsync
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_GetPhotoAsync_System_String_System_Int32_System_Int32_
  name: GetPhotoAsync
  nameWithType: UnsplasharpClient.GetPhotoAsync
  fullName: Unsplasharp.UnsplasharpClient.GetPhotoAsync
- uid: Unsplasharp.UnsplasharpClient.FetchCollectionsList*
  commentId: Overload:Unsplasharp.UnsplasharpClient.FetchCollectionsList
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_FetchCollectionsList_System_String_
  name: FetchCollectionsList
  nameWithType: UnsplasharpClient.FetchCollectionsList
  fullName: Unsplasharp.UnsplasharpClient.FetchCollectionsList
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.Collection}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<List<Collection>>
  nameWithType: Task<List<Collection>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Unsplasharp.Models.Collection>>
  nameWithType.vb: Task(Of List(Of Collection))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Unsplasharp.Models.Collection))
  name.vb: Task(Of List(Of Collection))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Unsplasharp.Models.Collection
    name: Collection
    href: Unsplasharp.Models.Collection.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Unsplasharp.Models.Collection
    name: Collection
    href: Unsplasharp.Models.Collection.html
  - name: )
  - name: )
- uid: Unsplasharp.UnsplasharpClient.GetCollection*
  commentId: Overload:Unsplasharp.UnsplasharpClient.GetCollection
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_GetCollection_System_String_
  name: GetCollection
  nameWithType: UnsplasharpClient.GetCollection
  fullName: Unsplasharp.UnsplasharpClient.GetCollection
- uid: System.Threading.Tasks.Task{Unsplasharp.Models.Collection}
  commentId: T:System.Threading.Tasks.Task{Unsplasharp.Models.Collection}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Collection>
  nameWithType: Task<Collection>
  fullName: System.Threading.Tasks.Task<Unsplasharp.Models.Collection>
  nameWithType.vb: Task(Of Collection)
  fullName.vb: System.Threading.Tasks.Task(Of Unsplasharp.Models.Collection)
  name.vb: Task(Of Collection)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Unsplasharp.Models.Collection
    name: Collection
    href: Unsplasharp.Models.Collection.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Unsplasharp.Models.Collection
    name: Collection
    href: Unsplasharp.Models.Collection.html
  - name: )
- uid: Unsplasharp.UnsplasharpClient.GetCollectionPhotos*
  commentId: Overload:Unsplasharp.UnsplasharpClient.GetCollectionPhotos
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_GetCollectionPhotos_System_String_System_Int32_System_Int32_
  name: GetCollectionPhotos
  nameWithType: UnsplasharpClient.GetCollectionPhotos
  fullName: Unsplasharp.UnsplasharpClient.GetCollectionPhotos
- uid: Unsplasharp.UnsplasharpClient.ListCollections*
  commentId: Overload:Unsplasharp.UnsplasharpClient.ListCollections
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_ListCollections_System_Int32_System_Int32_
  name: ListCollections
  nameWithType: UnsplasharpClient.ListCollections
  fullName: Unsplasharp.UnsplasharpClient.ListCollections
- uid: Unsplasharp.UnsplasharpClient.ListFeaturedCollections*
  commentId: Overload:Unsplasharp.UnsplasharpClient.ListFeaturedCollections
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_ListFeaturedCollections_System_Int32_System_Int32_
  name: ListFeaturedCollections
  nameWithType: UnsplasharpClient.ListFeaturedCollections
  fullName: Unsplasharp.UnsplasharpClient.ListFeaturedCollections
- uid: Unsplasharp.UnsplasharpClient.ListRelatedCollections*
  commentId: Overload:Unsplasharp.UnsplasharpClient.ListRelatedCollections
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_ListRelatedCollections_System_String_
  name: ListRelatedCollections
  nameWithType: UnsplasharpClient.ListRelatedCollections
  fullName: Unsplasharp.UnsplasharpClient.ListRelatedCollections
- uid: Unsplasharp.UnsplasharpClient.GetUser*
  commentId: Overload:Unsplasharp.UnsplasharpClient.GetUser
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_GetUser_System_String_System_Int32_System_Int32_
  name: GetUser
  nameWithType: UnsplasharpClient.GetUser
  fullName: Unsplasharp.UnsplasharpClient.GetUser
- uid: System.Threading.Tasks.Task{Unsplasharp.Models.User}
  commentId: T:System.Threading.Tasks.Task{Unsplasharp.Models.User}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<User>
  nameWithType: Task<User>
  fullName: System.Threading.Tasks.Task<Unsplasharp.Models.User>
  nameWithType.vb: Task(Of User)
  fullName.vb: System.Threading.Tasks.Task(Of Unsplasharp.Models.User)
  name.vb: Task(Of User)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Unsplasharp.Models.User
    name: User
    href: Unsplasharp.Models.User.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Unsplasharp.Models.User
    name: User
    href: Unsplasharp.Models.User.html
  - name: )
- uid: Unsplasharp.UnsplasharpClient.GetUserPorfolioLink*
  commentId: Overload:Unsplasharp.UnsplasharpClient.GetUserPorfolioLink
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_GetUserPorfolioLink_System_String_
  name: GetUserPorfolioLink
  nameWithType: UnsplasharpClient.GetUserPorfolioLink
  fullName: Unsplasharp.UnsplasharpClient.GetUserPorfolioLink
- uid: Unsplasharp.UnsplasharpClient.ListUserPhotos*
  commentId: Overload:Unsplasharp.UnsplasharpClient.ListUserPhotos
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_ListUserPhotos_System_String_System_Int32_System_Int32_Unsplasharp_UnsplasharpClient_OrderBy_System_Boolean_System_Int32_
  name: ListUserPhotos
  nameWithType: UnsplasharpClient.ListUserPhotos
  fullName: Unsplasharp.UnsplasharpClient.ListUserPhotos
- uid: Unsplasharp.UnsplasharpClient.ListUserLikedPhotos*
  commentId: Overload:Unsplasharp.UnsplasharpClient.ListUserLikedPhotos
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_ListUserLikedPhotos_System_String_System_Int32_System_Int32_Unsplasharp_UnsplasharpClient_OrderBy_
  name: ListUserLikedPhotos
  nameWithType: UnsplasharpClient.ListUserLikedPhotos
  fullName: Unsplasharp.UnsplasharpClient.ListUserLikedPhotos
- uid: Unsplasharp.UnsplasharpClient.ListUserCollections*
  commentId: Overload:Unsplasharp.UnsplasharpClient.ListUserCollections
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_ListUserCollections_System_String_System_Int32_System_Int32_
  name: ListUserCollections
  nameWithType: UnsplasharpClient.ListUserCollections
  fullName: Unsplasharp.UnsplasharpClient.ListUserCollections
- uid: Unsplasharp.UnsplasharpClient.GetUserStats*
  commentId: Overload:Unsplasharp.UnsplasharpClient.GetUserStats
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_GetUserStats_System_String_Unsplasharp_UnsplasharpClient_Resolution_System_Int32_
  name: GetUserStats
  nameWithType: UnsplasharpClient.GetUserStats
  fullName: Unsplasharp.UnsplasharpClient.GetUserStats
- uid: System.Threading.Tasks.Task{Unsplasharp.Models.UserStats}
  commentId: T:System.Threading.Tasks.Task{Unsplasharp.Models.UserStats}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<UserStats>
  nameWithType: Task<UserStats>
  fullName: System.Threading.Tasks.Task<Unsplasharp.Models.UserStats>
  nameWithType.vb: Task(Of UserStats)
  fullName.vb: System.Threading.Tasks.Task(Of Unsplasharp.Models.UserStats)
  name.vb: Task(Of UserStats)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Unsplasharp.Models.UserStats
    name: UserStats
    href: Unsplasharp.Models.UserStats.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Unsplasharp.Models.UserStats
    name: UserStats
    href: Unsplasharp.Models.UserStats.html
  - name: )
- uid: Unsplasharp.UnsplasharpClient.SearchPhotos*
  commentId: Overload:Unsplasharp.UnsplasharpClient.SearchPhotos
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_SearchPhotos_System_String_System_Int32_System_Int32_
  name: SearchPhotos
  nameWithType: UnsplasharpClient.SearchPhotos
  fullName: Unsplasharp.UnsplasharpClient.SearchPhotos
- uid: Unsplasharp.UnsplasharpClient.SearchCollections*
  commentId: Overload:Unsplasharp.UnsplasharpClient.SearchCollections
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_SearchCollections_System_String_System_Int32_System_Int32_
  name: SearchCollections
  nameWithType: UnsplasharpClient.SearchCollections
  fullName: Unsplasharp.UnsplasharpClient.SearchCollections
- uid: Unsplasharp.UnsplasharpClient.SearchUsers*
  commentId: Overload:Unsplasharp.UnsplasharpClient.SearchUsers
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_SearchUsers_System_String_System_Int32_System_Int32_
  name: SearchUsers
  nameWithType: UnsplasharpClient.SearchUsers
  fullName: Unsplasharp.UnsplasharpClient.SearchUsers
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.User}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Unsplasharp.Models.User}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<List<User>>
  nameWithType: Task<List<User>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Unsplasharp.Models.User>>
  nameWithType.vb: Task(Of List(Of User))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Unsplasharp.Models.User))
  name.vb: Task(Of List(Of User))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Unsplasharp.Models.User
    name: User
    href: Unsplasharp.Models.User.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Unsplasharp.Models.User
    name: User
    href: Unsplasharp.Models.User.html
  - name: )
  - name: )
- uid: Unsplasharp.UnsplasharpClient.FetchSearchPhotosList*
  commentId: Overload:Unsplasharp.UnsplasharpClient.FetchSearchPhotosList
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_FetchSearchPhotosList_System_String_
  name: FetchSearchPhotosList
  nameWithType: UnsplasharpClient.FetchSearchPhotosList
  fullName: Unsplasharp.UnsplasharpClient.FetchSearchPhotosList
- uid: Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList*
  commentId: Overload:Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_FetchSearcCollectionsList_System_String_
  name: FetchSearcCollectionsList
  nameWithType: UnsplasharpClient.FetchSearcCollectionsList
  fullName: Unsplasharp.UnsplasharpClient.FetchSearcCollectionsList
- uid: Unsplasharp.UnsplasharpClient.FetchSearcUsersList*
  commentId: Overload:Unsplasharp.UnsplasharpClient.FetchSearcUsersList
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_FetchSearcUsersList_System_String_
  name: FetchSearcUsersList
  nameWithType: UnsplasharpClient.FetchSearcUsersList
  fullName: Unsplasharp.UnsplasharpClient.FetchSearcUsersList
- uid: Unsplasharp.UnsplasharpClient.GetTotalStats*
  commentId: Overload:Unsplasharp.UnsplasharpClient.GetTotalStats
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_GetTotalStats
  name: GetTotalStats
  nameWithType: UnsplasharpClient.GetTotalStats
  fullName: Unsplasharp.UnsplasharpClient.GetTotalStats
- uid: System.Threading.Tasks.Task{Unsplasharp.Models.UnplashTotalStats}
  commentId: T:System.Threading.Tasks.Task{Unsplasharp.Models.UnplashTotalStats}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<UnplashTotalStats>
  nameWithType: Task<UnplashTotalStats>
  fullName: System.Threading.Tasks.Task<Unsplasharp.Models.UnplashTotalStats>
  nameWithType.vb: Task(Of UnplashTotalStats)
  fullName.vb: System.Threading.Tasks.Task(Of Unsplasharp.Models.UnplashTotalStats)
  name.vb: Task(Of UnplashTotalStats)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Unsplasharp.Models.UnplashTotalStats
    name: UnplashTotalStats
    href: Unsplasharp.Models.UnplashTotalStats.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Unsplasharp.Models.UnplashTotalStats
    name: UnplashTotalStats
    href: Unsplasharp.Models.UnplashTotalStats.html
  - name: )
- uid: Unsplasharp.UnsplasharpClient.GetMonthlyStats*
  commentId: Overload:Unsplasharp.UnsplasharpClient.GetMonthlyStats
  href: Unsplasharp.UnsplasharpClient.html#Unsplasharp_UnsplasharpClient_GetMonthlyStats
  name: GetMonthlyStats
  nameWithType: UnsplasharpClient.GetMonthlyStats
  fullName: Unsplasharp.UnsplasharpClient.GetMonthlyStats
- uid: System.Threading.Tasks.Task{Unsplasharp.Models.UnplashMonthlyStats}
  commentId: T:System.Threading.Tasks.Task{Unsplasharp.Models.UnplashMonthlyStats}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<UnplashMonthlyStats>
  nameWithType: Task<UnplashMonthlyStats>
  fullName: System.Threading.Tasks.Task<Unsplasharp.Models.UnplashMonthlyStats>
  nameWithType.vb: Task(Of UnplashMonthlyStats)
  fullName.vb: System.Threading.Tasks.Task(Of Unsplasharp.Models.UnplashMonthlyStats)
  name.vb: Task(Of UnplashMonthlyStats)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Unsplasharp.Models.UnplashMonthlyStats
    name: UnplashMonthlyStats
    href: Unsplasharp.Models.UnplashMonthlyStats.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Unsplasharp.Models.UnplashMonthlyStats
    name: UnplashMonthlyStats
    href: Unsplasharp.Models.UnplashMonthlyStats.html
  - name: )
